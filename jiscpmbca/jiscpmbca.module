<?php
/**
 * @file
 * Implementation file for JISCPM BCA module.
 * Allows the creation of business case assessments.
 */

/**
 * @function
 * Implementation of hook_menu().
 */
function jiscpmbca_menu() {
  $items = array();
  $items['jiscpm/dashboard/bcas'] = array(
    'title' => 'BCAs',
    'description' => 'jiscpm BCAs',
    'page callback' => 'jiscpmbca_list',
    'access arguments' => array('jiscpm project: access'),
    'file' => 'jiscpmbca.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['jiscpmbca_action/js/%'] = array(
    'page callback' => 'jiscpmbca_action_js',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type ' => MENU_CALLBACK,
  );
  $items['jiscpmbca_staff_cost/js/%'] = array(
    'page callback' => 'jiscpmbca_staff_cost_js',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type ' => MENU_CALLBACK,
  );
  $items['jiscpmbca_training_cost/js/%'] = array(
    'page callback' => 'jiscpmbca_training_cost_js',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type ' => MENU_CALLBACK,
  );
  $items['jiscpmbca_equipment_cost/js/%'] = array(
    'page callback' => 'jiscpmbca_equipment_cost_js',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type ' => MENU_CALLBACK,
  );
  $items['jiscpmbca_other_cost/js/%'] = array(
    'page callback' => 'jiscpmbca_other_cost_js',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type ' => MENU_CALLBACK,
  );
  $items['jiscpmbca_running_cost_training/js/%'] = array(
    'page callback' => 'jiscpmbca_running_cost_training_js',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type ' => MENU_CALLBACK,
  );
  $items['jiscpmbca_running_cost_licensing/js/%'] = array(
    'page callback' => 'jiscpmbca_running_cost_licensing_js',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type ' => MENU_CALLBACK,
  );
  $items['jiscpmbca_running_cost_maintenance/js/%'] = array(
    'page callback' => 'jiscpmbca_running_cost_maintenance_js',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type ' => MENU_CALLBACK,
  );
  $items['jiscpmbca_running_cost_other/js/%'] = array(
    'page callback' => 'jiscpmbca_running_cost_other_js',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type ' => MENU_CALLBACK,
  );
  return $items;
}
/**
 * @function
 * Implementation of hook_init.
 */
function jiscpmbca_init() {
  drupal_add_js(drupal_get_path('module', 'jiscpm') . '/jiscpm.js', 'module', 'header', FALSE);
  drupal_add_js(drupal_get_path('module', 'jiscpmbca') . '/jiscpmbca.js', 'module', 'header', FALSE);
}
/**
 * @function
 * Implement hook_perm().
 */
function jiscpmbca_perm() {
  return array('edit own jiscpmbca', 'edit jiscpmbca', 'create jiscpmbca');
}
/**
 * @function
 * Implement hook_access().
 */
function jiscpmbca_access($op, $node, $account = NULL) {
  global $user;
  if (empty($account)) {
    $account = $user;
  }
  if ($op != 'create') {
    $node = (object) $node;
  }
  if ($op = = 'create') {
    if (user_access('create jiscpmbca')) {
      return TRUE;
    }
  }
  elseif ($op = = 'update' || $op = = 'delete') {
    if (user_access('edit jiscpmbca')) {
      return TRUE;
    }
    elseif (user_access('edit own jiscpmbca') && $account->uid = = $node->uid) {
      return TRUE;
    }
  }
}
/**
 * @function
 */
function jiscpmbca_content_extra_fields($type_name) {
  if ($type_name = = 'jiscpmbca') {
    return array(
      'group1' => array('label' => 'Title', 'weight' => -20),
      'group2' => array('label' => 'Actions', 'weight' => -19),
      'group3' => array('label' => 'Staff Costs', 'weight' => -18),
      'group4' => array('label' => 'Training Costs', 'weight' => -17),
      'group5' => array('label' => 'Equipment Costs', 'weight' => -16),
      'group6' => array('label' => 'Other Costs', 'weight' => -15),
      'group7' => array('label' => 'Running Costs Training', 'weight' => -14),
      'group8' => array('label' => 'Running Costs Licensing', 'weight' => -13),
      'group9' => array('label' => 'Running Costs Maintenance', 'weight' => -12),
      'group10' => array('label' => 'Running Costs Other', 'weight' => -11),
      'group11' => array('label' => 'Strategies', 'weight' => -10),
      'group12' => array('label' => 'Benefits', 'weight' => -9),
      'group13' => array('label' => 'Implications', 'weight' => -8),
      'group14' => array('label' => 'Alternatives', 'weight' => -7),
      'group15' => array('label' => 'Organisational Areas', 'weight' => -6),
      'group16' => array('label' => 'Project', 'weight' => -5),
      'group17' => array('label' => 'Payback', 'weight' => -4),
    );
  }
}
/**
 * Implements hook_insert().
 */
function jiscpmbca_insert($node) {
  _jiscpmbca_beforesave($node);
  // Insert the project actions.
  // Check to see if data is valid.
  if ($node->actions != NULL || $node->actions != 0 || $node->actions != '') {
    foreach ($node->actions as $action) {
      $checkstring = explode(' ', $action['action_deliverydate']);
      if ($checkstring[1] = = NULL || $checkstring[1] = = '') {
      }
      else {
        $action['action_deliverydate'] = strtotime($action['action_deliverydate']);
      }
      db_query("INSERT INTO {jiscpmbca_action} (bca_nid, action_title, action_description, action_deliverydate) VALUES(%d, '%s', '%s', %s)", $node->nid, $action['action_title'], $action['action_description'], $action['action_deliverydate']);
    }
  }
  if ($node->staff_costs != NULL || $node->staff_costs != 0 || $node->staff_costs != '') {
    foreach ($node->staff_costs as $staff_cost) {
      db_query("INSERT INTO {jiscpmbca_staff_cost} (bca_nid, staff_cost_title, staff_cost_quantity, staff_cost_hours, staff_cost_rate) VALUES(%d, '%s', %s, %s, %s)", $node->nid,
      $staff_cost['staff_cost_title'], $staff_cost['staff_cost_quantity'], $staff_cost['staff_cost_hours'], $staff_cost['staff_cost_rate']);
    }
  }
  if ($node->training_costs != NULL || $node->training_costs != 0 || $node->training_costs != '') {
    foreach ($node->training_costs as $training_cost) {
      db_query("INSERT INTO {jiscpmbca_training_cost} (bca_nid,training_cost_title,training_cost_description,training_cost_total) VALUES(%d,'%s','%s',%s)", $node->nid,
      $training_cost['training_cost_title'], $training_cost['training_cost_description'], $training_cost['training_cost_total']);
    }
  }
  if ($node->equipment_costs != NULL || $node->equipment_costs != 0 || $node->equipment_costs != '') {
    foreach ($node->equipment_costs as $equipment_cost) {
      db_query("INSERT INTO {jiscpmbca_equipment_cost} (bca_nid, equipment_cost_title, equipment_cost_description, equipment_cost_total)
      VALUES(%d,'%s', '%s', %s)", $node->nid, $equipment_cost['equipment_cost_title'], $equipment_cost['equipment_cost_description'], $equipment_cost['equipment_cost_total']);
    }
  }
  // Insert values for critical success other_costs.
  if ($node->other_costs != NULL || $node->other_costs != 0 || $node->other_costs != '') {
    foreach ($node->other_costs as $other_cost) {
      db_query("INSERT INTO {jiscpmbca_other_cost} (bca_nid, other_cost_title, other_cost_description, other_cost_total) VALUES(%d, '%s', '%s', %s)", $node->nid,
      $other_cost['other_cost_title'], $other_cost['other_cost_description'], $other_cost['other_cost_total']);
    }
  }
  // Insert values for project running_cost_trainings.
  if ($node->running_cost_trainings != NULL || $node->running_cost_trainings != 0 || $node->running_cost_trainings != '') {
    foreach ($node->running_cost_trainings as $running_cost_training) {
      db_query("INSERT INTO {jiscpmbca_running_cost_training} (bca_nid, running_cost_training_title, running_cost_training_description, running_cost_training_total) VALUES(%d, '%s', '%s', %s)",
      $node->nid, $running_cost_training['running_cost_training_title'], $running_cost_training['running_cost_training_description'], $running_cost_training['running_cost_training_total']);
    }
  }
  // Insert values for project running_cost_licensings
  if ($node->running_cost_licensings != NULL || $node->running_cost_licensings != 0 || $node->running_cost_licensings != '') {
    foreach ($node->running_cost_licensings as $running_cost_licensing) {
      db_query("INSERT INTO {jiscpmbca_running_cost_licensing} (bca_nid, running_cost_licensing_title, running_cost_licensing_description, running_cost_licensing_total) VALUES(%d, '%s', '%s', %s)",
      $node->nid, $running_cost_licensing['running_cost_licensing_title'], $running_cost_licensing['running_cost_licensing_description'], $running_cost_licensing['running_cost_licensing_total']);
    }
  }
  // Insert values for project running_cost_maintenances.
  if ($node->running_cost_maintenances != NULL || $node->running_cost_maintenances != 0 || $node->running_cost_maintenances != '') {
    foreach ($node->running_cost_maintenances as $running_cost_maintenance) {
      db_query("INSERT INTO {jiscpmbca_running_cost_maintenance} (bca_nid, running_cost_maintenance_title, running_cost_maintenance_description, running_cost_maintenance_total)
      VALUES(%d, '%s', '%s', %s)", $node->nid, $running_cost_maintenance['running_cost_maintenance_title'], $running_cost_maintenance['running_cost_maintenance_objectives'],
      $running_cost_maintenance['running_cost_maintenance_total']);
    }
  }
  if ($node->running_cost_others != NULL || $node->running_cost_others != 0 || $node->running_cost_others != '') {
    foreach ($node->running_cost_others as $running_cost_other) {
      $deliverydate = strtotime($running_cost_other['running_cost_other_deliverydate']);
      db_query("INSERT INTO {jiscpmbca_running_cost_other} (bca_nid, running_cost_other_title, running_cost_other_description, running_cost_other_total)
      VALUES(%d, '%s', '%s', %s)", $node->nid, $running_cost_other['running_cost_other_title'], $running_cost_other['running_cost_other_description'], $running_cost_other['running_cost_other_total']);
    }
  }
  // Insert the jiscpmbca node.
  db_query("INSERT INTO {jiscpmbca} (nid, vid, project_nid, bca_strategies, bca_benefits,
  bca_implications, bca_alternatives,bca_payback, bca_staff_changes,
  bca_hr_related_issues, bca_changes_technology, bca_process_changes, bca_internal_support,
  bca_external_support)
  VALUES(%d, %d, %s, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')",
  $node->nid, $node->vid, $node->project_nid, $node->bca_strategies, $node->bca_benefits,
  $node->bca_implications, $node->bca_alternatives,
  $node->bca_payback, $node->bca_staff_changes, $node->bca_hr_related_issues, $node->bca_changes_technology,
  $node->bca_process_changes, $node->bca_internal_support, $node->bca_external_support);
}

/**
 * @function
 * Updates the staff_cost listing.
 */
function jiscpmbca_update($node) {
  if ($node->revision) {
    jiscpmbca_insert($node);
  }
  else {
    db_query("DELETE FROM {jiscpmbca} WHERE nid = %d AND vid = %d", $node->nid, $node->vid);
    db_query('DELETE FROM {jiscpmbca_action} WHERE bca_nid = %d', $node->nid);
    db_query('DELETE FROM {jiscpmbca_staff_cost} WHERE bca_nid = %d', $node->nid);
    db_query("DELETE FROM {jiscpmbca_training_cost} WHERE bca_nid = %d", $node->nid);
    db_query("DELETE FROM {jiscpmbca_equipment_cost} WHERE bca_nid = %d", $node->nid);
    db_query('DELETE FROM {jiscpmbca_other_cost} WHERE bca_nid = %d', $node->nid);
    db_query('DELETE FROM {jiscpmbca_running_cost_licensing} WHERE bca_nid = %d', $node->nid);
    db_query('DELETE FROM {jiscpmbca_running_cost_maintenance} WHERE bca_nid = %d', $node->nid);
    db_query('DELETE FROM {jiscpmbca_running_cost_training} WHERE bca_nid = %d', $node->nid);
    db_query('DELETE FROM {jiscpmbca_running_cost_other} WHERE bca_nid = %d', $node->nid);
    jiscpmbca_insert($node);
  }
}
/**
 * @function
 * Before saving the node.
 */
function _jiscpmbca_beforesave(&$node) {
  if (isset($node->actions)) {
    foreach ($node->actions as $action) {
      $action['action_deliverydate'] = strtotime($action['action_deliverydate']);
    }
  }
}
/**
 * @function
 * Deletes a jiscpmbca node from the database.
 */
function jiscpmbca_delete(&$node) {
  db_query("DELETE FROM {jiscpmbca} WHERE nid = %d", $node->nid);
  db_query('DELETE FROM {jiscpmbca_action} WHERE bca_nid = %d', $node->nid);
  db_query("DELETE FROM {jiscpmbca_staff_cost} WHERE bca_nid = %d", $node->nid);
  db_query("DELETE FROM {jiscpmbca_training_cost} WHERE bca_nid = %d", $node->nid);
  db_query("DELETE FROM {jiscpmbca_equipment_cost} WHERE bca_nid = %d", $node->nid);
  db_query('DELETE FROM {jiscpmbca_other_cost} WHERE bca_nid = %d', $node->nid);
  db_query('DELETE FROM {jiscpmbca_running_cost_licensing} WHERE bca_nid = %d', $node->nid);
  db_query('DELETE FROM {jiscpmbca_running_cost_maintenance} WHERE bca_nid = %d', $node->nid);
  db_query('DELETE FROM {jiscpmbca_running_cost_training} WHERE bca_nid = %d', $node->nid);
  db_query('DELETE FROM {jiscpmbca_running_cost_other} WHERE bca_nid = %d', $node->nid);
}
/**
 * @function
 * Implement hook_load().
 */
function jiscpmbca_load($node) {
  $result_a = db_query('SELECT action_title, action_description, action_deliverydate FROM {jiscpmbca_action} WHERE bca_nid = %d', $node->nid);
  $node->actions = array();
  while ($row_a = db_fetch_object($result_a)) {
    $action = array(
      'action_title' => $row_a->action_title,
      'action_description' => $row_a->action_description,
      'action_deliverydate' => $row_a->action_deliverydate,
    );
    $node->actions[] = $action;
  }
  $result_sc = db_query('SELECT staff_cost_title, staff_cost_quantity, staff_cost_hours, staff_cost_rate FROM {jiscpmbca_staff_cost} WHERE bca_nid = %d', $node->nid);
  $node->staff_costs = array();
  while ($row_sc = db_fetch_object($result_sc)) {
    $staff_cost = array(
      'staff_cost_title' => $row_sc->staff_cost_title,
      'staff_cost_quantity' => $row_sc->staff_cost_quantity,
      'staff_cost_hours' => $row_sc->staff_cost_hours,
      'staff_cost_rate' => $row_sc->staff_cost_rate,
    );
    $node->staff_costs[] = $staff_cost;
  }
  $result_tc = db_query('SELECT training_cost_title, training_cost_description, training_cost_total FROM {jiscpmbca_training_cost} WHERE bca_nid = %d', $node->nid);
  $node->training_costs = array();
  while ($row_tc = db_fetch_object($result_tc)) {
    $training_cost = array(
      'training_cost_title' => $row_tc->training_cost_title,
      'training_cost_description' => $row_tc->training_cost_description,
      'training_cost_total' => $row_tc->training_cost_total,
    );
    $node->training_costs[] = $training_cost;
  }
  $results_ec = db_query('SELECT equipment_cost_title, equipment_cost_description, equipment_cost_total FROM {jiscpmbca_equipment_cost}  WHERE bca_nid = %d', $node->nid);
  $node->equipment_costs = array();
  while ($rows_ec = db_fetch_object($results_ec)) {
    $equipment_cost = array(
      'equipment_cost_title' => $rows_ec->equipment_cost_title,
      'equipment_cost_description' => $rows_ec->equipment_cost_description,
      'equipment_cost_total' => $rows_ec->equipment_cost_total,
    );
    $node->equipment_costs[] = $equipment_cost;
  }
  $result_oc = db_query('SELECT other_cost_title, other_cost_description, other_cost_total FROM {jiscpmbca_other_cost} WHERE bca_nid = %d', $node->nid);
  $node->other_costs = array();
  while ($row_oc = db_fetch_object($result_oc)) {
    $other_cost = array(
      'other_cost_title' => $row_oc->other_cost_title,
      'other_cost_description' => $row_oc->other_cost_description,
      'other_cost_total' => $row_oc->other_cost_total,
    );
    $node->other_costs[] = $other_cost;
  }
  $result_rct = db_query('SELECT running_cost_training_title, running_cost_training_description, running_cost_training_total FROM {jiscpmbca_running_cost_training} WHERE bca_nid = %d', $node->nid);
  $node->running_cost_trainings = array();
  while ($row_rct = db_fetch_object($result_rct)) {
    $running_cost_training = array(
      'running_cost_training_title' => $row_rct->running_cost_training_title,
      'running_cost_training_description' => $row_rct->running_cost_training_description,
      'running_cost_training_total' => $row_rct->running_cost_training_total,
    );
    $node->running_cost_trainings[] = $running_cost_training;
  }
  $result_rcl = db_query('SELECT running_cost_licensing_title, running_cost_licensing_description, running_cost_licensing_total FROM {jiscpmbca_running_cost_licensing} WHERE bca_nid = %d', $node->nid);
  $node->running_cost_licensings = array();
  while ($row_rcl = db_fetch_object($result_rcl)) {
    $running_cost_licensing = array(
      'running_cost_licensing_title' => $row_rcl->running_cost_licensing_title,
      'running_cost_licensing_description' => $row_rcl->running_cost_licensing_description,
      'running_cost_licensing_total' => $row_rcl->running_cost_licensing_total,
    );
    $node->running_cost_licensings[] = $running_cost_licensing;
  }
  $result_rcm = db_query('SELECT running_cost_maintenance_title, running_cost_maintenance_description, running_cost_maintenance_total FROM {jiscpmbca_running_cost_maintenance} WHERE bca_nid = %d', $node->nid);
  $node->running_cost_maintenances = array();
  while ($row_rcm = db_fetch_object($result_rcm)) {
    $running_cost_maintenance = array(
      'running_cost_maintenance_title' => $row_rcm->running_cost_maintenance_title,
      'running_cost_maintenance_description' => $row_rcm->running_cost_maintenance_description,
      'running_cost_maintenance_total' => $row_rcm->running_cost_maintenance_total,
    );
    $node->running_cost_maintenances[] = $running_cost_maintenance;
  }
  $result_rco = db_query('SELECT running_cost_other_title, running_cost_other_description, running_cost_other_total FROM {jiscpmbca_running_cost_other} WHERE bca_nid = %d', $node->nid);
  $node->running_cost_others = array();
  while ($row_rco = db_fetch_object($result_rco)) {
    $running_cost_other = array(
      'running_cost_other_title' => $row_rco->running_cost_other_title,
      'running_cost_other_description' => $row_rco->running_cost_other_description,
      'running_cost_other_total' => $row_rco->running_cost_other_total,
    );
    $node->running_cost_others[] = $running_cost_other;
  }
  $result_bca = db_query('SELECT project_nid, bca_strategies, bca_benefits, bca_implications,
  bca_alternatives, bca_payback, bca_staff_changes, bca_hr_related_issues,
  bca_changes_technology, bca_process_changes, bca_internal_support, bca_external_support FROM
  {jiscpmbca} WHERE vid = %d', $node->vid);
  $node->jiscpmbcas = array();
  while ($row_bca = db_fetch_object($result_bca)) {
    $jiscpmbca = array(
      'project_nid' => $row_bca->project_nid,
      'bca_strategies' => $row_bca->bca_strategies,
      'bca_benefits' => $row_bca->bca_benefits,
      'bca_implications' => $row_bca->bca_implications,
      'bca_alternatives' => $row_bca->bca_alternatives,
      'bca_payback' => $row_bca->bca_payback,
      'bca_staff_changes' => $row_bca->bca_staff_changes,
      'bca_hr_related_issues' => $row_bca->bca_hr_related_issues,
      'bca_changes_technology' => $row_bca->bca_changes_technology,
      'bca_process_changes' => $row_bca->bca_process_changes,
      'bca_internal_support' => $row_bca->bca_internal_support,
      'bca_external_support' => $row_bca->bca_external_support,
    );
    $node->jiscpmbcas[] = $jiscpmbca;
  }
  return $node;
}
/**
 * @function
 * Implement hook_nodeapi().
 */
function jiscpmbca_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'prepare':
      if (!$node->nid) {
        $status_list = jiscpmattribute_attributes_bydomain('Project status');
        $node->projectstatus = $status_list['default'];
        $priority_list = jiscpmattribute_attributes_bydomain('Project priority');
        $node->projectpriority = $priority_list['default'];
      }
      break;
    case 'delete revision':
      db_query('DELETE FROM {jiscpmbca} WHERE nid = %d AND vid = %d', $node->nid, $node->vid);
      db_query('DELETE FROM {jiscpmbca_action} WHERE bca_nid = %d', $node->nid);
      db_query('DELETE FROM {jiscpmbca_staff_cost} WHERE bca_nid = %d', $node->nid);
      db_query('DELETE FROM {jiscpmbca_training_cost} WHERE bca_nid = %d', $node->nid);
      db_query('DELETE FROM {jiscpmbca_equipment_cost} WHERE bca_nid = %d', $node->nid);
      db_query('DELETE FROM {jiscpmbca_other_cost} WHERE bca_nid = %d', $node->nid);
      db_query('DELETE FROM {jiscpmbca_running_cost_licensing} WHERE bca_nid = %d', $node->nid);
      db_query('DELETE FROM {jiscpmbca_running_cost_other} WHERE bca_nid = %d', $node->nid);
      break;
  }
}
/**
 * @function
 * Implement hook_view().
 */
function jiscpmbca_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  $content = $node->content['body']['#value'];
  $breadcrumb = array();
  $breadcrumb[] = l(t('JISC PM'), 'jiscpm/dashboard');
  $breadcrumb[] = l(t('BCAS'), 'jiscpm/dashboard/bcas');
  drupal_set_breadcrumb($breadcrumb);
  // @TODO: render and theme staff_cost listing.
  return theme('jiscpmbca_view', $node, $teaser, $page);
}
/**
 * @function
 * Implement hook_views_api().
 */
function jiscpmbca_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'jiscpmbca'),
  );
}
/**
 * @function
 * Implement hook_node_info().
 */
function jiscpmbca_node_info() {
  return array(
    'jiscpmbca' => array(
      'name' => t('JISCPM BCA'),
      'module' => 'jiscpmbca',
      'description' => t('Create a JISC PM Business Case Assessment for a JISC PM Project or JISC PM Programme.'),
      'title_label' => t('JISC PM BCA'),
      'body_label' => t('Introduction'),
    ),
  );
}
/**
 * @function
 * Implement hook_form().
 */
function jiscpmbca_form(&$node, $form_state) {
  $type = node_get_types('type', $node);
  $form['#attributes']['class'] = 'jiscpmcomponent_node_form';
  $form['group1'] = array(
    '#type' => 'markup',
    '#theme' => 'jiscpm_form_group',
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'group1') : -20,
  );
  // Title.
  $title_default = "";
  if ($node->title != "" || $node->title != NULL) {
    $title_default = $node->title;
  }
  else {
    $title_default = "<INSERT PROJECT NAME> BCA";
  }
  $form['group1']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('BCA Title'),
    '#required' => TRUE,
    '#default_value' => $title_default,
  );
  // Insert project drop-down.
  // Adds functionality for adding project staff_costs .
  $currentproject = array();
  if ($node->project_nid != NULL) {
    $project = node_load($node->project_nid);
    $currentproject[$project->nid] = $project->title;
  }
  $projects = array();
  $results_pro = db_rewrite_sql(db_query("SELECT n.title, n.nid FROM {node} n WHERE n.type = '%s'", 'jiscpmproject'));
  while ($row_pro = db_fetch_object($results_pro)) {
    $projects[$row_pro->nid] = $row_pro->title;
  }
  if ($projects != NULL || $projects != '' || $projects != 0) {
    $form['project_nid'] = array(
      '#type' => 'select',
      '#title' => t('Project'),
      '#options' => $projects,
      '#default_value' => $currentproject,
      '#weight' => -19,
      '#process' => array('jiscpm_dependent_select_process'),
      '#required' => TRUE,
    );
  }
  // End project drop-down .
  // Ajax functionality for Project actions.
  $form['action_wrapper'] = array(
    '#tree' => FALSE,
    '#weight' => -18,
    '#prefix' => '<h2>Actions</h2><div class = "clear-block" id = "jiscpmbca-action-wrapper">Actions are key steps that will be undertaken during a project. For example, the action could be "Re-design website" and the description gives an overview of how the re-design of the website will occur. Each action must also be assigned a delivery date.',
    '#suffix' => '</div>',
  );
  // Get number of actions.
  $action_count = empty($node->actions) ? 0 : count($node->actions);
  // If a new action added, add to list and update the action count.
  if (isset($form_state['new_action'])) {
    if (!isset($node->actions)) {
      $node->actions = array();
    }
    $node->actions = array_merge($node->actions, array($form_state['new_action']));
    $action_count++;
  }
  // If a action removed, remove from list and update the action count.
  $remove_delta = -1;
  if (!empty($form_state['remove_delta'])) {
    $remove_delta = $form_state['remove_delta'] - 1;
    unset($node->actions[$remove_delta]);
    // Re-number the values.
    $node->actions = array_values($node->actions);
    $action_count--;
  }
  // Container to display existing actions.
  $form['action_wrapper']['actions'] = array(
    '#prefix' => '<div id = "jiscpmbca-actions">',
    '#suffix' => '</div>',
    '#theme' => 'jiscpmbca_action_table',
  );
  // Add the existing actions to the form.
  for ($delta = 0; $delta < $action_count; $delta++) {
    $action_title = isset($node->actions[$delta]['action_title']) ? $node->actions[$delta]['action_title'] : '';
    $action_description = isset($node->actions[$delta]['action_description']) ? $node->actions[$delta]['action_description'] : '';
    $action_deliverydate = isset($node->actions[$delta]['action_deliverydate']) ? $node->actions[$delta]['action_deliverydate'] : '';
    // Display existing actions using helper
    // function jiscpmbca_action_display_form().
    $form['action_wrapper']['actions'][$delta] = jiscpmbca_action_display_form($delta, $action_title,
     $action_description, $action_deliverydate);
  }
  // Add new actions.
  $form['action_wrapper']['add_action'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add Another Action'),
    '#tree' => FALSE,
    '#weight' => -18,
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Define the form fields for the new action title and action_scope's name.
  $form['action_wrapper']['add_action']['new_action'] = array(
    '#tree' => TRUE,
    '#theme' => 'jiscpmbca_add_action_form',
  );
  $form['action_wrapper']['add_action']['new_action']['new_action_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#weight' => 0,
  );
  $form['action_wrapper']['add_action']['new_action']['new_action_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#weight' => 1,
  );
  $form['action_wrapper']['add_action']['new_action']['format'] = filter_form(FILTER_FORMAT_DEFAULT, 2, $parents = array('info', 'action_wrapper', 'add_action', 'new_action', 'format'));
  // Project date start.
  if (module_exists('date_api') && module_exists('date_popup')) {
    $form['action_wrapper']['add_action']['new_action']['new_action_deliverydate'] = array(
      '#type' => 'date_popup',
      '#title' => t('Delivery date'),
      '#date_format' =>  'Y-m-d',
      '#default_value' => date('Y-m-d'),
      '#weight' => 3,
    );
  }
  // We name our button 'jiscpmbca_action_more' to avoid
  // conflicts with other modules using
  // AHAH-enabled buttons with the id 'more'.
  $form['action_wrapper']['add_action']['jiscpmbca_action_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add action'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_action_add_more_submit'),
    '#ahah' => array(
      'path' => 'jiscpmbca_action/js/0',
      'wrapper' => 'jiscpmbca-actions',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  // End ajax functionality for actions.
  $form['staff_cost_wrapper'] = array(
    '#tree' => FALSE,
    '#weight' => 0,
    '#prefix' => '<h2>Staff Costs</h2><div class = "clear-block" id = "jiscpmbca-staff_cost-wrapper">',
    '#suffix' => '</div>',
  );
  // Get number of staff_costs.
  $staff_cost_count = empty($node->staff_costs) ? 0 : count($node->staff_costs);
  // If a new staff_cost added, add to list and update the staff_cost count.
  if (isset($form_state['new_staff_cost'])) {
    if (!isset($node->staff_costs)) {
      $node->staff_costs = array();
    }
    $node->staff_costs = array_merge($node->staff_costs, array($form_state['new_staff_cost']));
    $staff_cost_count++;
  }
  // If a staff_cost removed, remove from list and update the staff_cost count.
  $remove_delta = -1;
  if (!empty($form_state['remove_delta'])) {
    $remove_delta = $form_state['remove_delta'] - 1;
    unset($node->staff_costs[$remove_delta]);
    // Re-number the values.
    $node->staff_costs = array_values($node->staff_costs);
    $staff_cost_count--;
  }
  // Container to display existing staff_costs.
  $form['staff_cost_wrapper']['staff_costs'] = array(
    '#prefix' => '<div id = "jiscpmbca-staff_costs">',
    '#suffix' => '</div>',
    '#theme' => 'jiscpmbca_staff_cost_table',
  );
  // Add the existing staff_costs to the form.
  for ($delta = 0; $delta < $staff_cost_count; $delta++) {
    $staff_cost_title = isset($node->staff_costs[$delta]['staff_cost_title']) ? $node->staff_costs[$delta]['staff_cost_title'] : '';
    $staff_cost_hours = isset($node->staff_costs[$delta]['staff_cost_hours']) ? $node->staff_costs[$delta]['staff_cost_hours'] : '';
    $staff_cost_rate = isset($node->staff_costs[$delta]['staff_cost_rate']) ? $node->staff_costs[$delta]['staff_cost_rate'] : '';
    $staff_cost_quantity = isset($node->staff_costs[$delta]['staff_cost_quantity']) ? $node->staff_costs[$delta]['staff_cost_quantity'] : '';
    // Display existing staff_costs using helper
    // function jiscpmbca_staff_cost_display_form().
    $form['staff_cost_wrapper']['staff_costs'][$delta] = jiscpmbca_staff_cost_display_form($delta,
    $staff_cost_title, $staff_cost_hours, $staff_cost_rate, $staff_cost_quantity);
  }
  // Add new staff_costs.
  $form['staff_cost_wrapper']['add_staff_cost'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add Another Staff Cost'),
    '#tree' => FALSE,
    '#weight' => -16,
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Define the form fields for the new staff_cost title
  // and staff_cost_title's name.
  $form['staff_cost_wrapper']['add_staff_cost']['new_staff_cost'] = array(
    '#tree' => TRUE,
    '#theme' => 'jiscpmbca_add_staff_cost_form',
  );
  $users = array();
  $results_user = db_query("SELECT name, uid FROM {users}");
  while ($row_user = db_fetch_object($results_user)) {
    $users[$row_user->uid] = check_plain($row_user->name);
  }
  $form['staff_cost_wrapper']['add_staff_cost']['new_staff_cost']['new_staff_cost_title'] = array(
    '#type' => 'select',
    '#title' => t('Resource'),
    '#options' => $users,
    '#weight' => 1,
  );
  $form['staff_cost_wrapper']['add_staff_cost']['new_staff_cost']['new_staff_cost_hours'] = array(
    '#type' => 'textfield',
    '#title' => t('Hours'),
    '#weight' => 1,
  );
  $form['staff_cost_wrapper']['add_staff_cost']['new_staff_cost']['new_staff_cost_rate'] = array(
    '#type' => 'textfield',
    '#title' => t('Rate'),
    '#weight' => 1,
  );
  $form['staff_cost_wrapper']['add_staff_cost']['new_staff_cost']['new_staff_cost_quantity'] = array(
    '#type' => 'textfield',
    '#title' => t('Quantity'),
    '#weight' => 1,
  );
  // We name our button 'jiscpmbca_staff_cost_more' to
  // avoid conflicts with other modules using
  // AHAH-enabled buttons with the id 'more'.
  $form['staff_cost_wrapper']['add_staff_cost']['jiscpmbca_staff_cost_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add Staff Cost'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_staff_cost_add_more_submit'),
    '#ahah' => array(
      'path' => 'jiscpmbca_staff_cost/js/0',
      'wrapper' => 'jiscpmbca-staff_costs',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  // Ajax functionality for project training_costs.
  $form['training_cost_wrapper'] = array(
    '#tree' => FALSE,
    '#weight' => 2,
    '#prefix' => '<h2>Training Costs</h2><div class = "clear-block" id = "jiscpmbca-training_cost-wrapper">',
    '#suffix' => '</div>',
  );
  // Get number of training_costs.
  $training_cost_count = empty($node->training_costs) ? 0 : count($node->training_costs);
  // If a new training_cost added, add to list
  // and update the training_cost count.
  if (isset($form_state['new_training_cost'])) {
    if (!isset($node->training_costs)) {
      $node->training_costs = array();
    }
    $node->training_costs = array_merge($node->training_costs, array($form_state['new_training_cost']));
    $training_cost_count++;
  }
  // If a training_cost removed, remove from list
  // and update the training_cost count.
  $remove_delta = -1;
  if (!empty($form_state['remove_delta'])) {
    $remove_delta = $form_state['remove_delta'] - 1;
    unset($node->training_costs[$remove_delta]);
    // Re-number the values.
    $node->training_costs = array_values($node->training_costs);
    $training_cost_count--;
  }
  // Container to display existing training_costs.
  $form['training_cost_wrapper']['training_costs'] = array(
    '#prefix' => '<div id = "jiscpmbca-training_costs">',
    '#suffix' => '</div>',
    '#theme' => 'jiscpmbca_training_cost_table',
  );
  // Add the existing training_costs to the form.
  for ($delta = 0; $delta < $training_cost_count; $delta++) {
    $training_cost_title = isset($node->training_costs[$delta]['training_cost_title']) ? $node->training_costs[$delta]['training_cost_title'] : '';
    $training_cost_description = isset($node->training_costs[$delta]['training_cost_description']) ? $node->training_costs[$delta]['training_cost_description'] : '';
    $training_cost_total = isset($node->training_costs[$delta]['training_cost_total']) ? $node->training_costs[$delta]['training_cost_total'] : '';
    // Display existing training_costs using helper
    // function jiscpmbca_training_cost_display_form().
    $form['training_cost_wrapper']['training_costs'][$delta] = jiscpmbca_training_cost_display_form($delta, $training_cost_title, $training_cost_description, $training_cost_total);
  }
  // Add new training_costs
  $form['training_cost_wrapper']['add_training_cost'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add Another Training Cost'),
    '#tree' => FALSE,
    '#weight' => -16,
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Define the form fields for the new training_cost
  // title and training_cost_title's name.
  $form['training_cost_wrapper']['add_training_cost']['new_training_cost'] = array(
    '#tree' => TRUE,
    '#theme' => 'jiscpmbca_add_training_cost_form',
  );
  $form['training_cost_wrapper']['add_training_cost']['new_training_cost']['new_training_cost_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#weight' => 0,
  );
  $form['training_cost_wrapper']['add_training_cost']['new_training_cost']['new_training_cost_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#weight' => 1,
  );
  $form['training_cost_wrapper']['add_training_cost']['new_training_cost']['format'] = filter_form(FILTER_FORMAT_DEFAULT, 2, $parents = array('info', 'training_cost_wrapper', 'add_training_cost', 'new_training_cost', 'format'));
  // Total cost.
  $form['training_cost_wrapper']['add_training_cost']['new_training_cost']['new_training_cost_total'] = array(
    '#type' => 'textfield',
    '#title' => t('Total cost'),
    '#weight' => 3,
  );
  // We name our button 'jiscpmbca_training_cost_more'
  // to avoid conflicts with other modules using
  // AHAH-enabled buttons with the id 'more'.
  $form['training_cost_wrapper']['add_training_cost']['jiscpmbca_training_cost_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add Training Cost'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_training_cost_add_more_submit'),
    '#ahah' => array(
      'path' => 'jiscpmbca_training_cost/js/0',
      'wrapper' => 'jiscpmbca-training_costs',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  // End ajax functionality for project training costs.
  // Ajax functionality for equipment costs.
  $form['equipment_cost_wrapper'] = array(
    '#tree' => FALSE,
    '#weight' => 1,
    '#prefix' => '<h2>Equipment Costs</h2><div class = "clear-block" id = "jiscpmbca-equipment_cost-wrapper">',
    '#suffix' => '</div>',
  );
  // Get number of equipment_costs.
  $equipment_cost_count = empty($node->equipment_costs) ? 0 : count($node->equipment_costs);
  // If a new equipment_cost added, add to
  // list and update the equipment_cost count.
  if (isset($form_state['new_equipment_cost'])) {
    if (!isset($node->equipment_costs)) {
      $node->equipment_costs = array();
    }
    $node->equipment_costs = array_merge($node->equipment_costs, array($form_state['new_equipment_cost']));
    $equipment_cost_count++;
  }
  // If a equipment_cost removed, remove from
  // list and update the equipment_cost count.
  $remove_delta = -1;
  if (!empty($form_state['remove_delta'])) {
    $remove_delta = $form_state['remove_delta'] - 1;
    unset($node->equipment_costs[$remove_delta]);
    // Re-number the values.
    $node->equipment_costs = array_values($node->equipment_costs);
    $equipment_cost_count--;
  }
  // Container to display existing equipment_costs.
  $form['equipment_cost_wrapper']['equipment_costs'] = array(
    '#prefix' => '<div id = "jiscpmbca-equipment_costs">',
    '#suffix' => '</div>',
    '#theme' => 'jiscpmbca_equipment_cost_table',
  );
  // Add the existing equipment_costs to the form.
  for ($delta = 0; $delta < $equipment_cost_count; $delta++) {
    $equipment_cost_title = isset($node->equipment_costs[$delta]['equipment_cost_title']) ? $node->equipment_costs[$delta]['equipment_cost_title'] : '';
    $equipment_cost_description = isset($node->equipment_costs[$delta]['equipment_cost_description']) ? $node->equipment_costs[$delta]['equipment_cost_description'] : '';
    $equipment_cost_total = isset($node->equipment_costs[$delta]['equipment_cost_total']) ? $node->equipment_costs[$delta]['equipment_cost_total'] : '';
    // Display existing equipment_costs using
    // helper function jiscpmbca_equipment_cost_display_form().
    $form['equipment_cost_wrapper']['equipment_costs'][$delta] = jiscpmbca_equipment_cost_display_form($delta, $equipment_cost_title, $equipment_cost_description, $equipment_cost_total);
  }
  // Add new equipment_costs
  $form['equipment_cost_wrapper']['add_equipment_cost'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add Another Equipment Cost'),
    '#tree' => FALSE,
    '#weight' => -16,
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Define the form fields for the new
  // equipment_cost title and
  // equipment_cost_stake_in_project's name.
  $form['equipment_cost_wrapper']['add_equipment_cost']['new_equipment_cost'] = array(
    '#tree' => TRUE,
    '#theme' => 'jiscpmbca_add_equipment_cost_form',
  );
  $form['equipment_cost_wrapper']['add_equipment_cost']['new_equipment_cost']['new_equipment_cost_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#weight' => 1,
  );
  $form['equipment_cost_wrapper']['add_equipment_cost']['new_equipment_cost']['new_equipment_cost_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#weight' => 2,
  );
  $form['equipment_cost_wrapper']['add_equipment_cost']['new_equipment_cost']['format'] = filter_form(FILTER_FORMAT_DEFAULT, 3, $parents = array('info', 'equipment_cost_wrapper', 'add_equipment_cost', 'new_equipment_cost', 'format'));
  $form['equipment_cost_wrapper']['add_equipment_cost']['new_equipment_cost']['new_equipment_cost_total'] = array(
    '#type' => 'textfield',
    '#title' => t('Total Cost'),
    '#weight' => 4,
  );
  // We name our button 'jiscpmbca_equipment_cost_more'
  // to avoid conflicts with other modules using
  // AHAH-enabled buttons with the id 'more'.
  $form['equipment_cost_wrapper']['add_equipment_cost']['jiscpmbca_equipment_cost_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add Equipment Cost'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_equipment_cost_add_more_submit'),
    '#ahah' => array(
      'path' => 'jiscpmbca_equipment_cost/js/0',
      'wrapper' => 'jiscpmbca-equipment_costs',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  // End ajax functionality for equipment costs.
  // Ajax functionality for critical success other_costs.
  $form['other_cost_wrapper'] = array(
    '#tree' => FALSE,
    '#weight' => 3,
    '#prefix' => '<h2>Other Costs</h2><div class = "clear-block" id = "jiscpmbca-other_cost-wrapper">',
    '#suffix' => '</div>',
  );
  // Get number of other costs.
  $other_cost_count = empty($node->other_costs) ? 0 : count($node->other_costs);
  // If a new other_cost added, add to list
  // and update the other_cost count.
  if (isset($form_state['new_other_cost'])) {
    if (!isset($node->other_costs)) {
      $node->other_costs = array();
    }
    $node->other_costs = array_merge($node->other_costs, array($form_state['new_other_cost']));
    $other_cost_count++;
  }
  // If a other cost is removed, remove
  // from list and update the other cost count.
  $remove_delta = -1;
  if (!empty($form_state['remove_delta'])) {
    $remove_delta = $form_state['remove_delta'] - 1;
    unset($node->other_costs[$remove_delta]);
    // Re-number the values.
    $node->other_costs = array_values($node->other_costs);
    $other_cost_count--;
  }
  // Container to display existing other costs.
  $form['other_cost_wrapper']['other_costs'] = array(
    '#prefix' => '<div id = "jiscpmbca-other_costs">',
    '#suffix' => '</div>',
    '#theme' => 'jiscpmbca_other_cost_table',
  );
  // Add the existing other_costs to the form.
  for ($delta = 0; $delta < $other_cost_count; $delta++) {
    $other_cost_title = isset($node->other_costs[$delta]['other_cost_title']) ? $node->other_costs[$delta]['other_cost_title'] : '';
    $other_cost_description = isset($node->other_costs[$delta]['other_cost_description']) ? $node->other_costs[$delta]['other_cost_description'] : '';
    $other_cost_total = isset($node->other_costs[$delta]['other_cost_total']) ? $node->other_costs[$delta]['other_cost_total'] : '';
    // Display existing other_costs using helper
    // function jiscpmbca_other_cost_display_form().
    $form['other_cost_wrapper']['other_costs'][$delta] = jiscpmbca_other_cost_display_form($delta, $other_cost_title, $other_cost_description, $other_cost_total);
  }
  // Add new other_costs.
  $form['other_cost_wrapper']['add_other_cost'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add Another Other Cost'),
    '#tree' => FALSE,
    '#weight' => -16,
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Define the form fields for the new
  // other_cost title and other_cost_description's name.
  $form['other_cost_wrapper']['add_other_cost']['new_other_cost'] = array(
    '#tree' => TRUE,
    '#theme' => 'jiscpmbca_add_other_cost_form',
  );
  $form['other_cost_wrapper']['add_other_cost']['new_other_cost']['new_other_cost_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#weight' => 0,
  );
  $form['other_cost_wrapper']['add_other_cost']['new_other_cost']['new_other_cost_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#weight' => 1,
  );
  $form['other_cost_wrapper']['add_other_cost']['new_other_cost']['format'] = filter_form(FILTER_FORMAT_DEFAULT, 2, $parents = array('info', 'other_cost_wrapper', 'add_other_cost', 'new_other_cost', 'format'));
  $form['other_cost_wrapper']['add_other_cost']['new_other_cost']['new_other_cost_total'] = array(
    '#type' => 'textfield',
    '#title' => t('Total'),
    '#weight' => 3,
  );
  // We name our button 'jiscpmbca_other_cost_more'
  // to avoid conflicts with other modules using
  // AHAH-enabled buttons with the id 'more'.
  $form['other_cost_wrapper']['add_other_cost']['jiscpmbca_other_cost_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add Other Cost'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_other_cost_add_more_submit'),
    '#ahah' => array(
      'path' => 'jiscpmbca_other_cost/js/0',
      'wrapper' => 'jiscpmbca-other_costs',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  // End ajax functionality for critical success other_costs.
  // Ajax functionality for project running_cost_trainings.
  $form['running_cost_training_wrapper'] = array(
    '#tree' => FALSE,
    '#weight' => 5,
    '#prefix' => '<h2>Training Running Costs</h2><div class = "clear-block" id = "jiscpmbca-running_cost_training-wrapper">',
    '#suffix' => '</div>',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Get number of running cost trainings.
  $running_cost_training_count = empty($node->running_cost_trainings) ? 0 : count($node->running_cost_trainings);
  // If a new running_cost_training added, add to
  // list and update the running_cost_training count.
  if (isset($form_state['new_running_cost_training'])) {
    if (!isset($node->running_cost_trainings)) {
      $node->running_cost_trainings = array();
    }
    $node->running_cost_trainings = array_merge($node->running_cost_trainings, array($form_state['new_running_cost_training']));
    $running_cost_training_count++;
  }
  // If a running_cost_training removed, remove from
  // list and update the running_cost_training count.
  $remove_delta = -1;
  if (!empty($form_state['remove_delta'])) {
    $remove_delta = $form_state['remove_delta'] - 1;
    unset($node->running_cost_trainings[$remove_delta]);
    // Re-number the values.
    $node->running_cost_trainings = array_values($node->running_cost_trainings);
    $running_cost_training_count--;
  }
  // Container to display existing running_cost_trainings.
  $form['running_cost_training_wrapper']['running_cost_trainings'] = array(
    '#prefix' => '<div id = "jiscpmbca-running_cost_trainings">',
    '#suffix' => '</div>',
    '#theme' => 'jiscpmbca_running_cost_training_table',
  );
  // Add the existing running_cost_trainings to the form.
  for ($delta = 0; $delta < $running_cost_training_count; $delta++) {
    $running_cost_training_title = isset($node->running_cost_trainings[$delta]['running_cost_training_title']) ? $node->running_cost_trainings[$delta]['running_cost_training_title'] : '';
    $running_cost_training_description = isset($node->running_cost_trainings[$delta]['running_cost_training_description']) ? $node->running_cost_trainings[$delta]['running_cost_training_description'] : '';
    $running_cost_training_total = isset($node->running_cost_trainings[$delta]['running_cost_training_total']) ? $node->running_cost_trainings[$delta]['running_cost_training_total'] : '';
    // Display existing running_cost_trainings using
    // helper function jiscpmbca_running_cost_training_display_form().
    $form['running_cost_training_wrapper']['running_cost_trainings'][$delta] = jiscpmbca_running_cost_training_display_form($delta, $running_cost_training_title, $running_cost_training_description, $running_cost_training_total);
  }
  // Add new running cost trainings.
  $form['running_cost_training_wrapper']['add_running_cost_training'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add Another Training Running Cost'),
    '#tree' => FALSE,
    '#weight' => -16,
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Define the form fields for the new running_cost_training
  // title and running_cost_training_description's name.
  $form['running_cost_training_wrapper']['add_running_cost_training']['new_running_cost_training'] = array(
    '#tree' => TRUE,
    '#theme' => 'jiscpmbca_add_running_cost_training_form',
  );
  $form['running_cost_training_wrapper']['add_running_cost_training']['new_running_cost_training']['new_running_cost_training_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#weight' => 0,
  );
  $form['running_cost_training_wrapper']['add_running_cost_training']['new_running_cost_training']['new_running_cost_training_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#weight' => 1,
  );
  $form['running_cost_training_wrapper']['add_running_cost_training']['new_running_cost_training']['format'] = filter_form(FILTER_FORMAT_DEFAULT, 2, $parents = array('info', 'running_cost_training_wrapper', 'add_running_cost_training', 'new_running_cost_training', 'format'));
  $form['running_cost_training_wrapper']['add_running_cost_training']['new_running_cost_training']['new_running_cost_training_total'] = array(
    '#type' => 'textfield',
    '#title' => t('Total Cost'),
    '#weight' => 3,
  );
  // We name our button 'jiscpmbca_running_cost_training_more'
  // to avoid conflicts with other modules using
  // AHAH-enabled buttons with the id 'more'.
  $form['running_cost_training_wrapper']['add_running_cost_training']['jiscpmbca_running_cost_training_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add Training Running Cost'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_running_cost_training_add_more_submit'),
    '#ahah' => array(
      'path' => 'jiscpmbca_running_cost_training/js/0',
      'wrapper' => 'jiscpmbca-running_cost_trainings',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  // End ajax functionality for project running_cost_trainings.
  // Ajax functionality for project running_cost_licensings.
  $form['running_cost_licensing_wrapper'] = array(
    '#tree' => FALSE,
    '#weight' => 5,
    '#prefix' => '<h2>Licensing Running Costs</h2><div class = "clear-block" id = "jiscpmbca-running_cost_licensing-wrapper">',
    '#suffix' => '</div>',
  );
  // Get number of running_cost_licensings.
  $running_cost_licensing_count = empty($node->running_cost_licensings) ? 0 : count($node->running_cost_licensings);
  // If a new running_cost_licensing added, add to
  // list and update the running_cost_licensing count.
  if (isset($form_state['new_running_cost_licensing'])) {
    if (!isset($node->running_cost_licensings)) {
      $node->running_cost_licensings = array();
    }
    $node->running_cost_licensings = array_merge($node->running_cost_licensings, array($form_state['new_running_cost_licensing']));
    $running_cost_licensing_count++;
  }
  // If a running cost licensing removed,
  // remove from list and update the running cost licensing count.
  $remove_delta = -1;
  if (!empty($form_state['remove_delta'])) {
    $remove_delta = $form_state['remove_delta'] - 1;
    unset($node->running_cost_licensings[$remove_delta]);
    // Re-number the values.
    $node->running_cost_licensings = array_values($node->running_cost_licensings);
    $running_cost_licensing_count--;
  }
  // Container to display existing running cost licensings.
  $form['running_cost_licensing_wrapper']['running_cost_licensings'] = array(
    '#prefix' => '<div id = "jiscpmbca-running_cost_licensings">',
    '#suffix' => '</div>',
    '#theme' => 'jiscpmbca_running_cost_licensing_table',
  );
  // Add the existing running_cost_licensings to the form.
  for ($delta = 0; $delta < $running_cost_licensing_count; $delta++) {
    $running_cost_licensing_title = isset($node->running_cost_licensings[$delta]['running_cost_licensing_title']) ? $node->running_cost_licensings[$delta]['running_cost_licensing_title'] : '';
    $running_cost_licensing_description = isset($node->running_cost_licensings[$delta]['running_cost_licensing_description']) ? $node->running_cost_licensings[$delta]['running_cost_licensing_description'] : '';
    $running_cost_licensing_total = isset($node->running_cost_licensings[$delta]['running_cost_licensing_total']) ? $node->running_cost_licensings[$delta]['running_cost_licensing_total'] : '';
    // Display existing running_cost_licensings using helper
    // function jiscpmbca_running_cost_licensing_display_form().
    $form['running_cost_licensing_wrapper']['running_cost_licensings'][$delta] = jiscpmbca_running_cost_licensing_display_form($delta, $running_cost_licensing_title, $running_cost_licensing_description, $running_cost_licensing_total);
  }
  // Add new running_cost_licensings
  $form['running_cost_licensing_wrapper']['add_running_cost_licensing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add Another Licensing Running Cost'),
    '#tree' => FALSE,
    '#weight' => -16,
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Define the form fields for the new running_cost_licensing title
  // and running_cost_licensing_description's name.
  $form['running_cost_licensing_wrapper']['add_running_cost_licensing']['new_running_cost_licensing'] = array(
    '#tree' => TRUE,
    '#theme' => 'jiscpmbca_add_running_cost_licensing_form',
  );
  $form['running_cost_licensing_wrapper']['add_running_cost_licensing']['new_running_cost_licensing']['new_running_cost_licensing_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#weight' => 0,
  );
  $form['running_cost_licensing_wrapper']['add_running_cost_licensing']['new_running_cost_licensing']['new_running_cost_licensing_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#weight' => 1,
  );
  $form['running_cost_licensing_wrapper']['add_running_cost_licensing']['new_running_cost_licensing']['format'] = filter_form(FILTER_FORMAT_DEFAULT, 2, $parents = array('info', 'running_cost_licensing_wrapper', 'add_running_cost_licensing', 'new_running_cost_licensing', 'format'));
  $form['running_cost_licensing_wrapper']['add_running_cost_licensing']['new_running_cost_licensing']['new_running_cost_licensing_total'] = array(
    '#type' => 'textfield',
    '#title' => t('Total Cost'),
    '#weight' => 3,
  );
  // We name our button 'jiscpmbca_running_cost_licensing_more'
  // to avoid conflicts with other modules using
  // AHAH-enabled buttons with the id 'more'.
  $form['running_cost_licensing_wrapper']['add_running_cost_licensing']['jiscpmbca_running_cost_licensing_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add Licensing Running Cost'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_running_cost_licensing_add_more_submit'),
    '#ahah' => array(
      'path' => 'jiscpmbca_running_cost_licensing/js/0',
      'wrapper' => 'jiscpmbca-running_cost_licensings',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  // End ajax functionality for project running_cost_licensings.
  // Ajax functionality for running_cost_maintenances
  // and associated objectives.
  $form['running_cost_maintenance_wrapper'] = array(
    '#tree' => FALSE,
    '#weight' => 5,
    '#prefix' => '<h2>Maintenance Running Costs</h2><div class = "clear-block" id = "jiscpmbca-running_cost_maintenance-wrapper">',
    '#suffix' => '</div>',
  );
  // Get number of running cost maintenances.
  $running_cost_maintenance_count = empty($node->running_cost_maintenances) ? 0 : count($node->running_cost_maintenances);
  // If a new running_cost_maintenance added, add to
  // list and update the running_cost_maintenance count.
  if (isset($form_state['new_running_cost_maintenance'])) {
    if (!isset($node->running_cost_maintenances)) {
      $node->running_cost_maintenances = array();
    }
    $node->running_cost_maintenances = array_merge($node->running_cost_maintenances, array($form_state['new_running_cost_maintenance']));
    $running_cost_maintenance_count++;
  }
  // If a running cost maintenance removed, remove from
  // list and update the running_cost_maintenance count.
  $remove_delta = -1;
  if (!empty($form_state['remove_delta'])) {
    $remove_delta = $form_state['remove_delta'] - 1;
    unset($node->running_cost_maintenances[$remove_delta]);
    // Re-number the values.
    $node->running_cost_maintenances = array_values($node->running_cost_maintenances);
    $running_cost_maintenance_count--;
  }
  // Container to display existing running_cost_maintenances.
  $form['running_cost_maintenance_wrapper']['running_cost_maintenances'] = array(
    '#prefix' => '<div id = "jiscpmbca-running_cost_maintenances">',
    '#suffix' => '</div>',
    '#theme' => 'jiscpmbca_running_cost_maintenance_table',
  );
  // Add the existing running_cost_maintenances to the form.
  for ($delta = 0; $delta < $running_cost_maintenance_count; $delta++) {
    $running_cost_maintenance_title = isset($node->running_cost_maintenances[$delta]['running_cost_maintenance_title']) ? $node->running_cost_maintenances[$delta]['running_cost_maintenance_title'] : '';
    $running_cost_maintenance_description = isset($node->running_cost_maintenances[$delta]['running_cost_maintenance_description']) ? $node->running_cost_maintenances[$delta]['running_cost_maintenance_description'] : '';
    $running_cost_maintenance_total = isset($node->running_cost_maintenances[$delta]['running_cost_maintenance_total']) ? $node->running_cost_maintenances[$delta]['running_cost_maintenance_total'] : '';
    // Display existing running_cost_maintenances using
    // helper function jiscpmbca_running_cost_maintenance_display_form().
    $form['running_cost_maintenance_wrapper']['running_cost_maintenances'][$delta] = jiscpmbca_running_cost_maintenance_display_form($delta, $running_cost_maintenance_title, $running_cost_maintenance_description, $running_cost_maintenance_total);
  }
  // Add new running_cost_maintenances.
  $form['running_cost_maintenance_wrapper']['add_running_cost_maintenance'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add another Running Cost Maintenance'),
    '#tree' => FALSE,
    '#weight' => -16,
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );

  // Define the form fields for the new running_cost_maintenance
  // title and running_cost_maintenance_objectives's name.
  $form['running_cost_maintenance_wrapper']['add_running_cost_maintenance']['new_running_cost_maintenance'] = array(
    '#tree' => TRUE,
    '#theme' => 'jiscpmbca_add_running_cost_maintenance_form',
  );
  $form['running_cost_maintenance_wrapper']['add_running_cost_maintenance']['new_running_cost_maintenance']['new_running_cost_maintenance_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#weight' => 0,
  );
  $form['running_cost_maintenance_wrapper']['add_running_cost_maintenance']['new_running_cost_maintenance']['new_running_cost_maintenance_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#weight' => 1,
  );
  $form['running_cost_maintenance_wrapper']['add_running_cost_maintenance']['new_running_cost_maintenance']['format'] = filter_form(FILTER_FORMAT_DEFAULT, 2, $parents = array('info', 'running_cost_maintenance_wrapper', 'add_running_cost_maintenance', 'new_running_cost_maintenance', 'format'));
  $form['running_cost_maintenance_wrapper']['add_running_cost_maintenance']['new_running_cost_maintenance']['new_running_cost_maintenance_total'] = array(
    '#type' => 'textfield',
    '#title' => t('Total Cost'),
    '#weight' => 3,
  );
  // We name our button 'jiscpmbca_running_cost_maintenance_more'
  // to avoid conflicts with other modules using
  // AHAH-enabled buttons with the id 'more'.
  $form['running_cost_maintenance_wrapper']['add_running_cost_maintenance']['jiscpmbca_running_cost_maintenance_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add Maintenance Running Cost'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_running_cost_maintenance_add_more_submit'),
    '#ahah' => array(
      'path' => 'jiscpmbca_running_cost_maintenance/js/0',
      'wrapper' => 'jiscpmbca-running_cost_maintenances',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  // End ajax functionality for running_cost_maintenances
  // and associated objectives.
  // ajax functionality for Project running_cost_others.
  $form['running_cost_other_wrapper'] = array(
    '#tree' => FALSE,
    '#weight' => 5,
    '#prefix' => '<h2>Other Running Costs</h2><div class = "clear-block" id = "jiscpmbca-running_cost_other-wrapper">',
    '#suffix' => '</div>',
  );
  // Get number of running_cost_others.
  $running_cost_other_count = empty($node->running_cost_others) ? 0 : count($node->running_cost_others);
  // If a new running_cost_other added, add to
  // list and update the running_cost_other count.
  if (isset($form_state['new_running_cost_other'])) {
    if (!isset($node->running_cost_others)) {
      $node->running_cost_others = array();
    }
    $node->running_cost_others = array_merge($node->running_cost_others, array($form_state['new_running_cost_other']));
    $running_cost_other_count++;
  }
  // If a running_cost_other removed, remove from
  // list and update the running_cost_other count.
  $remove_delta = -1;
  if (!empty($form_state['remove_delta'])) {
    $remove_delta = $form_state['remove_delta'] - 1;
    unset($node->running_cost_others[$remove_delta]);
    // Re-number the values.
    $node->running_cost_others = array_values($node->running_cost_others);
    $running_cost_other_count--;
  }
  // Container to display existing running_cost_others.
  $form['running_cost_other_wrapper']['running_cost_others'] = array(
    '#prefix' => '<div id = "jiscpmbca-running_cost_others">',
    '#suffix' => '</div>',
    '#theme' => 'jiscpmbca_running_cost_other_table',
  );
  // Add the existing running_cost_others to the form.
  for ($delta = 0; $delta < $running_cost_other_count; $delta++) {
    $running_cost_other_title = isset($node->running_cost_others[$delta]['running_cost_other_title']) ? $node->running_cost_others[$delta]['running_cost_other_title'] : '';
    $running_cost_other_description = isset($node->running_cost_others[$delta]['running_cost_other_description']) ? $node->running_cost_others[$delta]['running_cost_other_description'] : '';
    $running_cost_other_total = isset($node->running_cost_others[$delta]['running_cost_other_total']) ? $node->running_cost_others[$delta]['running_cost_other_total'] : '';
    // Display existing running_cost_others using helper
    // function jiscpmbca_running_cost_other_display_form().
    $form['running_cost_other_wrapper']['running_cost_others'][$delta] = jiscpmbca_running_cost_other_display_form($delta, $running_cost_other_title, $running_cost_other_description, $running_cost_other_total);
  }
  // Add new running_cost_others
  $form['running_cost_other_wrapper']['add_running_cost_other'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add Another Other Running Cost'),
    '#tree' => FALSE,
    '#weight' => -16,
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Define the form fields for the new running_cost_other
  // title and running_cost_other_scope's name.
  $form['running_cost_other_wrapper']['add_running_cost_other']['new_running_cost_other'] = array(
    '#tree' => TRUE,
    '#theme' => 'jiscpmbca_add_running_cost_other_form',
  );
  $form['running_cost_other_wrapper']['add_running_cost_other']['new_running_cost_other']['new_running_cost_other_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#weight' => 0,
  );
  $form['running_cost_other_wrapper']['add_running_cost_other']['new_running_cost_other']['new_running_cost_other_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#weight' => 1,
  );
  $form['running_cost_other_wrapper']['add_running_cost_other']['new_running_cost_other']['format'] = filter_form(FILTER_FORMAT_DEFAULT, 2, $parents = array('info', 'running_cost_other_wrapper', 'add_running_cost_other', 'new_running_cost_other', 'format'));
  $form['running_cost_other_wrapper']['add_running_cost_other']['new_running_cost_other']['new_running_cost_other_total'] = array(
    '#type' => 'textfield',
    '#title' => t('Total Cost'),
    '#weight' => 3,
  );
  // We name our button 'jiscpmbca_running_cost_other_more'
  // to avoid conflicts with other modules using
  // AHAH-enabled buttons with the id 'more'.
  $form['running_cost_other_wrapper']['add_running_cost_other']['jiscpmbca_running_cost_other_more'] = array(
    '#type' => 'submit',
    '#value' => t('Add Other Running Cost'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_running_cost_other_add_more_submit'),
    '#ahah' => array(
      'path' => 'jiscpmbca_running_cost_other/js/0',
      'wrapper' => 'jiscpmbca-running_cost_others',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  // End ajax functionality for Project running_cost_others.
  $form['group10'] = array(
    '#type' => 'markup',
    '#theme' => 'jiscpm_form_group',
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'group10') : -11,
  );
  // Project strategies.
  $form['group10']['strategies_fieldset'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<h2>Project Strategies</h2>',
    '#title' => t('Project Strategies'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $form['group10']['strategies_fieldset']['bca_strategies'] = array(
    '#type' => 'textarea',
    '#title' => t('Project Strategies'),
    '#default_value' => $node->jiscpmbcas[0]['bca_strategies'],
  );
  $form['group10']['strategies_fieldset']['format'] = filter_form(FILTER_FORMAT_DEFAULT, NULL, $parents = array('info', 'group10', 'strategies_fieldset', 'format'));
  $form['group11'] = array(
    '#type' => 'markup',
    '#theme' => 'jiscpm_form_group',
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'group11') : -10,
  );
  $form['group11']['benefits_fieldset'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<h2>Project Benefits</h2>',
    '#title' => t('Project Benefits'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Project benefits.
  $form['group11']['benefits_fieldset']['bca_benefits'] = array(
    '#type' => 'textarea',
    '#title' => t('Project Benefits'),
    '#default_value' => $node->jiscpmbcas[0]['bca_benefits'],
  );
  $form['group11']['benefits_fieldset']['format'] = filter_form(FILTER_FORMAT_DEFAULT, NULL, $parents = array('info', 'group11', 'benefits_fieldset', 'format'));
  $form['group12'] = array(
    '#type' => 'markup',
    '#theme' => 'jiscpm_form_group',
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'group12') : -9,
  );
  $form['group12']['implications_fieldset'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<h2>Implications of Not Undertaking Project</h2>',
    '#title' => t('Implications of Not Undertaking Project'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Project implications.
  $form['group12']['implications_fieldset']['bca_implications'] = array(
    '#type' => 'textarea',
    '#title' => t('Implications of Not Undertaking Project'),
    '#default_value' => $node->jiscpmbcas[0]['bca_implications'],
  );
  $form['group12']['implications_fieldset']['format'] = filter_form(FILTER_FORMAT_DEFAULT, NULL, $parents = array('info', 'group12', 'implications_fieldset', 'format'));
  $form['group13'] = array(
    '#type' => 'markup',
    '#theme' => 'jiscpm_form_group',
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'group13') : -8,
  );
  $form['group13']['alternatives_fieldset'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<h2>Project Alternatives</h2>',
    '#title' => t('Project Alternatives'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Project alternatives.
  $form['group13']['alternatives_fieldset'] ['bca_alternatives'] = array(
    '#type' => 'textarea',
    '#title' => t('Project Alternatives'),
    '#default_value' => $node->jiscpmbcas[0]['bca_alternatives'],
  );
  $form['group13']['alternatives_fieldset']['format'] = filter_form(FILTER_FORMAT_DEFAULT, NULL, $parents = array('info', 'group13', 'alternatives_fieldset', 'format'));
  $form['group14'] = array(
    '#type' => 'markup',
    '#theme' => 'jiscpm_form_group',
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'group14') : -7,
  );
  $form['group14']['organisational_fieldset'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<h2>Organisational Areas Affected</h2>',
    '#title' => t('Organisational Areas Affected'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Project organisational areas.
  $form['group14']['organisational_fieldset']['bca_staff_changes'] = array(
    '#type' => 'textarea',
    '#title' => t('Staff Changes'),
    '#default_value' => $node->jiscpmbcas[0]['bca_staff_changes'],
  );
  $form['group14']['organisational_fieldset']['bca_hr_related_issues'] = array(
    '#type' => 'textarea',
    '#title' => t('HR Related Issues'),
    '#default_value' => $node->jiscpmbcas[0]['bca_hr_related_issues'],
  );
  $form['group14']['organisational_fieldset']['bca_changes_technology'] = array(
    '#type' => 'textarea',
    '#title' => t('Changes to current technology'),
    '#default_value' => $node->jiscpmbcas[0]['bca_changes_technology'],
  );
  $form['group14']['organisational_fieldset']['bca_process_changes'] = array(
    '#type' => 'textarea',
    '#title' => t('Process changes'),
    '#default_value' => $node->jiscpmbcas[0]['bca_process_changes'],
  );
  $form['group14']['organisational_fieldset']['bca_internal_support'] = array(
    '#type' => 'textarea',
    '#title' => t('Internal Support Implications'),
    '#default_value' => $node->jiscpmbcas[0]['bca_internal_support'],
  );
  $form['group14']['organisational_fieldset']['bca_external_support'] = array(
    '#type' => 'textarea',
    '#title' => t('External Support Implications'),
    '#default_value' => $node->jiscpmbcas[0]['bca_external_support'],
  );
  $form['group14']['organisational_fieldset']['format'] = filter_form(FILTER_FORMAT_DEFAULT, NULL, $parents = array('info', 'group14', 'organisational_fieldset', 'format'));
  $form['group15'] = array(
    '#type' => 'markup',
    '#theme' => 'jiscpm_form_group',
    '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'group15') : -6,
  );
  $form['group15']['payback_fieldset'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<h2>Project Payback</h2>',
    '#title' => t('Project Payback'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  // Project organisational areas.
  $form['group15']['payback_fieldset']['bca_payback'] = array(
    '#type' => 'textarea',
    '#title' => t('Project Payback'),
    '#default_value' => $node->jiscpmbcas[0]['bca_payback'],
  );
  $form['group15']['payback_fieldset']['format'] = filter_form(FILTER_FORMAT_DEFAULT, NULL, $parents = array('info', 'group15', 'payback_fieldset', 'format'));
  return $form;
}
/**
 * @function
 * Submit handler for 'Add Action' button on node form.
 */
function jiscpmbca_action_add_more_submit($form, &$form_state) {
  $form_state['remove_delta'] = 0;
  // Set the form to rebuild and run submit handlers.
  node_form_submit_build_node($form, $form_state);
  // Make the changes we want to the form state.
  if ($form_state['values']['jiscpmbca_action_more']) {
    $new_action = array();
    $new_action['action_title'] = $form_state['values']['new_action']['new_action_title'];
    $new_action['action_description'] = $form_state['values']['new_action']['new_action_description'];
    $new_action['action_deliverydate'] = $form_state['values']['new_action']['new_action_deliverydate'];
    $form_state['new_action'] = $new_action;
  }
}
/**
 * @function
 * Submit handler for 'Add staff_cost' button on node form.
 */
function jiscpmbca_staff_cost_add_more_submit($form, &$form_state) {
  $form_state['remove_delta'] = 0;
  // Set the form to rebuild and run submit handlers.
  node_form_submit_build_node($form, $form_state);
  // Make the changes we want to the form state.
  if ($form_state['values']['jiscpmbca_staff_cost_more']) {
    $new_staff_cost = array();
    $new_staff_cost['staff_cost_title'] = $form_state['values']['new_staff_cost']['new_staff_cost_title'];
    $new_staff_cost['staff_cost_quantity'] = $form_state['values']['new_staff_cost']['new_staff_cost_quantity'];
    $new_staff_cost['staff_cost_hours'] = $form_state['values']['new_staff_cost']['new_staff_cost_hours'];
    $new_staff_cost['staff_cost_rate'] = $form_state['values']['new_staff_cost']['new_staff_cost_rate'];
    $form_state['new_staff_cost'] = $new_staff_cost;
  }
}
/**
 * @function
 * Submit handler for 'Add training_cost' button on node form.
 */
function jiscpmbca_training_cost_add_more_submit($form, &$form_state) {
  $form_state['remove_delta'] = 0;
  // Set the form to rebuild and run submit handlers.
  node_form_submit_build_node($form, $form_state);
  // Make the changes we want to the form state.
  if ($form_state['values']['jiscpmbca_training_cost_more']) {
    $new_training_cost = array();
    $new_training_cost['training_cost_title'] = $form_state['values']['new_training_cost']['new_training_cost_title'];
    $new_training_cost['training_cost_description'] = $form_state['values']['new_training_cost']['new_training_cost_description'];
    $new_training_cost['training_cost_total'] = $form_state['values']['new_training_cost']['new_training_cost_total'];
    $form_state['new_training_cost'] = $new_training_cost;
  }
}
/**
 * @function
 * Submit handler for 'Add equipment_cost' button on node form.
 */
function jiscpmbca_equipment_cost_add_more_submit($form, &$form_state) {
  $form_state['remove_delta'] = 0;
  // Set the form to rebuild and run submit handlers.
  node_form_submit_build_node($form, $form_state);
  // Make the changes we want to the form state.
  if ($form_state['values']['jiscpmbca_equipment_cost_more']) {
    $new_equipment_cost = array();
    $new_equipment_cost['equipment_cost_title'] = $form_state['values']['new_equipment_cost']['new_equipment_cost_title'];
    $new_equipment_cost['equipment_cost_description'] = $form_state['values']['new_equipment_cost']['new_equipment_cost_description'];
    $new_equipment_cost['equipment_cost_total'] = $form_state['values']['new_equipment_cost']['new_equipment_cost_total'];
    $form_state['new_equipment_cost'] = $new_equipment_cost;
  }
}
/**
 * @function
 * Submit handler for 'Add other_cost' button on node form.
 */
function jiscpmbca_other_cost_add_more_submit($form, &$form_state) {
  $form_state['remove_delta'] = 0;
  // Set the form to rebuild and run submit handlers.
  node_form_submit_build_node($form, $form_state);
  // Make the changes we want to the form state.
  if ($form_state['values']['jiscpmbca_other_cost_more']) {
    $new_other_cost = array();
    $new_other_cost['other_cost_title'] = $form_state['values']['new_other_cost']['new_other_cost_title'];
    $new_other_cost['other_cost_description'] = $form_state['values']['new_other_cost']['new_other_cost_description'];
    $new_other_cost['other_cost_total'] = $form_state['values']['new_other_cost']['new_other_cost_total'];
    $form_state['new_other_cost'] = $new_other_cost;
  }
}
/**
 * @function
 * Submit handler for 'Add running_cost_training' button on node form.
 */
function jiscpmbca_running_cost_training_add_more_submit($form, &$form_state) {
  $form_state['remove_delta'] = 0;
  // Set the form to rebuild and run submit handlers.
  node_form_submit_build_node($form, $form_state);
  // Make the changes we want to the form state.
  if ($form_state['values']['jiscpmbca_running_cost_training_more']) {
    $new_running_cost_training = array();
    $new_running_cost_training['running_cost_training_title'] = $form_state['values']['new_running_cost_training']['new_running_cost_training_title'];
    $new_running_cost_training['running_cost_training_description'] = $form_state['values']['new_running_cost_training']['new_running_cost_training_description'];
    $new_running_cost_training['running_cost_training_total'] = $form_state['values']['new_running_cost_training']['new_running_cost_training_total'];
    $form_state['new_running_cost_training'] = $new_running_cost_training;
  }
}
/**
 * @function
 * Submit handler for 'Add running_cost_licensing' button on node form.
 */
function jiscpmbca_running_cost_licensing_add_more_submit($form, &$form_state) {
  $form_state['remove_delta'] = 0;
  // Set the form to rebuild and run submit handlers.
  node_form_submit_build_node($form, $form_state);
  // Make the changes we want to the form state.
  if ($form_state['values']['jiscpmbca_running_cost_licensing_more']) {
    $new_running_cost_licensing = array();
    $new_running_cost_licensing['running_cost_licensing_title'] = $form_state['values']['new_running_cost_licensing']['new_running_cost_licensing_title'];
    $new_running_cost_licensing['running_cost_licensing_description'] = $form_state['values']['new_running_cost_licensing']['new_running_cost_licensing_description'];
    $new_running_cost_licensing['running_cost_licensing_total'] = $form_state['values']['new_running_cost_licensing']['new_running_cost_licensing_total'];
    $form_state['new_running_cost_licensing'] = $new_running_cost_licensing;
  }
}
/**
 * @function
 * Submit handler for 'Add running_cost_maintenance' button on node form.
 */
function jiscpmbca_running_cost_maintenance_add_more_submit($form, &$form_state) {
  $form_state['remove_delta'] = 0;
  // Set the form to rebuild and run submit handlers.
  node_form_submit_build_node($form, $form_state);
  // Make the changes we want to the form state.
  if ($form_state['values']['jiscpmbca_running_cost_maintenance_more']) {
    $new_running_cost_maintenance = array();
    $new_running_cost_maintenance['running_cost_maintenance_title'] = $form_state['values']['new_running_cost_maintenance']['new_running_cost_maintenance_title'];
    $new_running_cost_maintenance['running_cost_maintenance_description'] = $form_state['values']['new_running_cost_maintenance']['new_running_cost_maintenance_description'];
    $new_running_cost_maintenance['running_cost_maintenance_total'] = $form_state['values']['new_running_cost_maintenance']['new_running_cost_maintenance_total'];
    $form_state['new_running_cost_maintenance'] = $new_running_cost_maintenance;
  }
}
/**
 * @function
 * Submit handler for 'Add running_cost_other' button on node form.
 */
function jiscpmbca_running_cost_other_add_more_submit($form, &$form_state) {
  $form_state['remove_delta'] = 0;
  // Set the form to rebuild and run submit handlers.
  node_form_submit_build_node($form, $form_state);
  // Make the changes we want to the form state.
  if ($form_state['values']['jiscpmbca_running_cost_other_more']) {
    $new_running_cost_other = array();
    $new_running_cost_other['running_cost_other_title'] = $form_state['values']['new_running_cost_other']['new_running_cost_other_title'];
    $new_running_cost_other['running_cost_other_description'] = $form_state['values']['new_running_cost_other']['new_running_cost_other_description'];
    $new_running_cost_other['running_cost_other_total'] = $form_state['values']['new_running_cost_other']['new_running_cost_other_total'];
    $form_state['new_running_cost_other'] = $new_running_cost_other;
  }
}
/**
 * @function
 * Submit handler for 'Remove' button on node form.
 */
function jiscpmbca_remove_row_submit($form, &$form_state) {
  // Set the form to rebuild and run submit handlers.
  node_form_submit_build_node($form, $form_state);
}
/**
 * @function
 * Ajax Form Handler.
 */
function jiscpmbca_action_js($delta = 0) {
  $form = jiscpmbca_ajax_form_handler($delta);
  // Render the new output.
  $action_form = $form['action_wrapper']['actions'];
  // Prevent duplicate wrappers.
  unset($action_form['#prefix'], $action_form['#suffix']);
  $output = theme('status_messages') . drupal_render($action_form);
  // AHAH is not being nice to us and doesn't
  // know about the "Remove" button.
  // This causes it not to attach AHAH behaviours to
  // it after modifying the form.
  // So we need to tell it first.
  $javascript = drupal_add_js(NULL, NULL);
  if (isset($javascript['setting'])) {
    $output . = '<script type = "text/javascript">jQuery.extend(Drupal.settings, ' . drupal_to_js(call_user_func_array('array_merge_recursive', $javascript['setting'])) . ');</script>';
  }
  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => $output));
}
/**
 * @function
 * Ajax Form Handler.
 */
function jiscpmbca_staff_cost_js($delta = 0) {
  $form = jiscpmbca_ajax_form_handler($delta);
  // Render the new output.
  $staff_cost_form = $form['staff_cost_wrapper']['staff_costs'];
  // Prevent duplicate wrappers.
  unset($staff_cost_form['#prefix'], $staff_cost_form['#suffix']);
  $output = theme('status_messages') . drupal_render($staff_cost_form);
  // AHAH is not being nice to us and
  // doesn't know about the "Remove" button.
  // This causes it not to attach AHAH behaviours
  // to it after modifying the form.
  // So we need to tell it first.
  $javascript = drupal_add_js(NULL, NULL);
  if (isset($javascript['setting'])) {
    $output . = '<script type = "text/javascript">jQuery.extend(Drupal.settings, ' . drupal_to_js(call_user_func_array('array_merge_recursive', $javascript['setting'])) . ');</script>';
  }
  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => $output));
}
/**
 * @function
 * Ajax Form Handler.
 */
function jiscpmbca_training_cost_js($delta = 0) {
  $form = jiscpmbca_ajax_form_handler($delta);
  // Render the new output.
  $training_cost_form = $form['training_cost_wrapper']['training_costs'];
  // Prevent duplicate wrappers.
  unset($training_cost_form['#prefix'], $training_cost_form['#suffix']);
  $output = theme('status_messages') . drupal_render($training_cost_form);
  // AHAH is not being nice to us and doesn't know about the "Remove" button.
  // This causes it not to attach AHAH
  // behaviours to it after modifying the form.
  // So we need to tell it first.
  $javascript = drupal_add_js(NULL, NULL);
  if (isset($javascript['setting'])) {
    $output . = '<script type = "text/javascript">jQuery.extend(Drupal.settings, ' . drupal_to_js(call_user_func_array('array_merge_recursive', $javascript['setting'])) . ');</script>';
  }
  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => $output));
}
/**
 * @function
 * Ajax Form Handler.
 */
function jiscpmbca_equipment_cost_js($delta = 0) {
  $form = jiscpmbca_ajax_form_handler($delta);
  // Render the new output.
  $training_cost_form = $form['equipment_cost_wrapper']['equipment_costs'];
  // Prevent duplicate wrappers.
  unset($training_cost_form['#prefix'], $training_cost_form['#suffix']);
  $output = theme('status_messages') . drupal_render($training_cost_form);
  // AHAH is not being nice to us and doesn't
  // know about the "Remove" button.
  // This causes it not to attach AHAH
  // behaviours to it after modifying the form.
  // So we need to tell it first.
  $javascript = drupal_add_js(NULL, NULL);
  if (isset($javascript['setting'])) {
    $output . = '<script type = "text/javascript">jQuery.extend(Drupal.settings, ' . drupal_to_js(call_user_func_array('array_merge_recursive', $javascript['setting'])) . ');</script>';
  }
  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => $output));
}
/**
 * @function
 * Ajax Form Handler.
 */
function jiscpmbca_other_cost_js($delta = 0) {
  $form = jiscpmbca_ajax_form_handler($delta);
  // Render the new output.
  $other_cost_form = $form['other_cost_wrapper']['other_costs'];
  // Prevent duplicate wrappers.
  unset($other_cost_form['#prefix'], $other_cost_form['#suffix']);
  $output = theme('status_messages') . drupal_render($other_cost_form);
  // AHAH is not being nice to us and doesn't
  // know about the "Remove" button.
  // This causes it not to attach AHAH
  // behaviours to it after modifying the form.
  // So we need to tell it first.
  $javascript = drupal_add_js(NULL, NULL);
  if (isset($javascript['setting'])) {
    $output . = '<script type = "text/javascript">jQuery.extend(Drupal.settings, ' . drupal_to_js(call_user_func_array('array_merge_recursive', $javascript['setting'])) . ');</script>';
  }
  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => $output));
}
/**
 * @function
 * Ajax Form Handler.
 */
function jiscpmbca_running_cost_training_js($delta = 0) {
  $form = jiscpmbca_ajax_form_handler($delta);
  // Render the new output.
  $running_cost_training_form = $form['running_cost_training_wrapper']['running_cost_trainings'];
  // Prevent duplicate wrappers.
  unset($running_cost_training_form['#prefix'], $running_cost_training_form['#suffix']);
  $output = theme('status_messages') . drupal_render($running_cost_training_form);
  // AHAH is not being nice to us and doesn't
  // know about the "Remove" button.
  // This causes it not to attach AHAH
  // behaviours to it after modifying the form.
  // So we need to tell it first.
  $javascript = drupal_add_js(NULL, NULL);
  if (isset($javascript['setting'])) {
    $output .= '<script type = "text/javascript">jQuery.extend(Drupal.settings, ' . drupal_to_js(call_user_func_array('array_merge_recursive', $javascript['setting'])) . ');</script>';
  }
  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => $output));
}
/**
 * @function
 * Ajax Form Handler.
 */
function jiscpmbca_running_cost_licensing_js($delta = 0) {
  $form = jiscpmbca_ajax_form_handler($delta);
  // Render the new output.
  $running_cost_licensing_form = $form['running_cost_licensing_wrapper']['running_cost_licensings'];
  // Prevent duplicate wrappers.
  unset($running_cost_licensing_form['#prefix'], $running_cost_licensing_form['#suffix']);
  $output = theme('status_messages') . drupal_render($running_cost_licensing_form);
  // AHAH is not being nice to us and
  // doesn't know about the "Remove" button.
  // This causes it not to attach AHAH
  // behaviours to it after modifying the form.
  // So we need to tell it first.
  $javascript = drupal_add_js(NULL, NULL);
  if (isset($javascript['setting'])) {
    $output . = '<script type = "text/javascript">jQuery.extend(Drupal.settings, ' . drupal_to_js(call_user_func_array('array_merge_recursive', $javascript['setting'])) . ');</script>';
  }
  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => $output));
}
/**
 * @function
 * Ajax Form Handler.
 */
function jiscpmbca_running_cost_maintenance_js($delta = 0) {
  $form = jiscpmbca_ajax_form_handler($delta);
  // Render the new output.
  $running_cost_maintenance_form = $form['running_cost_maintenance_wrapper']['running_cost_maintenances'];
  // Prevent duplicate wrappers.
  unset($running_cost_maintenance_form['#prefix'], $running_cost_maintenance_form['#suffix']);
  $output = theme('status_messages') . drupal_render($running_cost_maintenance_form);
  // AHAH is not being nice to us and doesn't
  // know about the "Remove" button.
  // This causes it not to attach AHAH
  // behaviours to it after modifying the form.
  // So we need to tell it first.
  $javascript = drupal_add_js(NULL, NULL);
  if (isset($javascript['setting'])) {
    $output . = '<script type = "text/javascript">jQuery.extend(Drupal.settings, ' . drupal_to_js(call_user_func_array('array_merge_recursive', $javascript['setting'])) . ');</script>';
  }
  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => $output));
}
/**
 * @function
 * Ajax Form Handler.
 */
function jiscpmbca_running_cost_other_js($delta = 0) {
  $form = jiscpmbca_ajax_form_handler($delta);
  // Render the new output.
  $running_cost_other_form = $form['running_cost_other_wrapper']['running_cost_others'];
  // Prevent duplicate wrappers.
  unset($running_cost_other_form['#prefix'], $running_cost_other_form['#suffix']);
  $output = theme('status_messages') . drupal_render($running_cost_other_form);
  // AHAH is not being nice to us and doesn't
  // know about the "Remove" button.
  // This causes it not to attach AHAH
  // behaviours to it after modifying the form.
  // So we need to tell it first.
  $javascript = drupal_add_js(NULL, NULL);
  if (isset($javascript['setting'])) {
    $output .= '<script type = "text/javascript">jQuery.extend(Drupal.settings, ' . drupal_to_js(call_user_func_array('array_merge_recursive', $javascript['setting'])) . ');</script>';
  }
  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => $output));
}
/**
 * @function
 * AJAX form handler.
 */
function jiscpmbca_ajax_form_handler($delta = 0) {
  // The form is generated in an include file which we need to include manually.
  include_once 'modules/node/node.pages.inc';
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Get the form from the cache.
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  // We need to process the form, prepare for that by setting a few internals.
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;
  // Set up our form state variable, needed for removing staff_costs.
  $form_state['remove_delta'] = $delta;
  // Build, validate and if possible, submit the form.
  drupal_process_form($form_id, $form, $form_state);
  // If validation fails, force form submission.
  if (form_get_errors()) {
    form_execute_handlers('submit', $form, $form_state);
  }
  // This call recreates the form relying
  // solely on the form_state that the
  // drupal_process_form set up.
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  return $form;
}
/**
 * @function
 * Implements hook_theme().
 */
function jiscpmbca_theme() {
  return array(
    'jiscpmbca_action_table' => array(
      'arguments' => array('form'),
    ),
    'jiscpmbca_staff_cost_table' => array(
      'arguments' => array('form'),
    ),
    'jiscpmbca_training_cost_table' => array(
      'arguments' => array('form'),
    ),
    'jiscpmbca_equipment_cost_table' => array(
      'arguments' => array('form'),
    ),
    'jiscpmbca_other_cost_table' => array(
      'arguments' => array('form'),
    ),
    'jiscpmbca_running_cost_training_table' => array(
      'arguments' => array('form'),
    ),
    'jiscpmbca_running_cost_licensing_table' => array(
      'arguments' => array('form'),
    ),
    'jiscpmbca_running_cost_maintenance_table' => array(
      'arguments' => array('form'),
    ),
    'jiscpmbca_running_cost_other_table' => array(
      'arguments' => array('form'),
    ),
    'jiscpmbca_list' => array(
      'file'      => 'jiscpmbca.theme.inc',
      'arguments' => array('header', 'projects'),
    ),
    'jiscpmbca_view' => array(
      'file'      => 'jiscpmbca.theme.inc',
      'arguments' => array('node', 'teaser', 'page'),
    ),
    'jiscpmbca_running_cost_other_table' => array(
      'arguments' => array('form'),
    ),
  );
}
/**
 * @function
 * Outputs the project action table for display on the node form.
 */
function theme_jiscpmbca_action_table($form) {
  $rows = array();
  $headers = array(
    t('Title'),
    t('Description'),
    t('Delivery Date'),
    '',
  );
  foreach (element_children($form) as $key) {
    // No need to print the field title every time.
    unset(
      $form[$key]['action_title_text']['#title'],
      $form[$key]['action_description']['#title'],
      $form[$key]['action_deliverydate']['#title'],
      $form[$key]['remove_action']['#title']
    );
    // Build the table row.
    $row = array(
      'data' => array(
        array('data' => drupal_render($form[$key]['action_title']) . drupal_render($form[$key]['action_title_text']), 'class' => 'action-title'),
        array('data' => drupal_render($form[$key]['action_description']) . drupal_render($form[$key]['action_description_text']), 'class' => 'action-description'),
        array('data' => drupal_render($form[$key]['action_deliverydate']) . drupal_render($form[$key]['action_deliverydate_text']), 'class' => 'action-deliverydate'),
        array('data' => drupal_render($form[$key]['remove_action']), 'class' => 'remove-action'),
      ),
    );
    // Add additional attributes to the row, such as a class for this row.
    if (isset($form[$key]['#attributes'])) {
      $row = array_merge($row, $form[$key]['#attributes']);
    }
    $rows[] = $row;
  }
  $output = theme('table', $headers, $rows);
  $output . = drupal_render($form);
  return $output;
}
/**
 * @function
 * Outputs the project staff_cost table for display on the node form.
 */
function theme_jiscpmbca_staff_cost_table($form) {
  $rows = array();
  $headers = array(
    t('Resource'),
    t('Hours'),
    t('Rate'),
    t('Quantity'),
    '',
  );
  foreach (element_children($form) as $key) {
    // No need to print the field title every time.
    unset(
      $form[$key]['staff_cost_title_text']['#title'],
      $form[$key]['staff_cost_hours_text']['#title'],
      $form[$key]['staff_cost_rate_text']['#title'],
      $form[$key]['staff_cost_quantity_text']['#title'],
      $form[$key]['remove_staff_cost']['#title']
    );
    // Build the table row.
    $row = array(
      'data' => array(
        array('data' => drupal_render($form[$key]['staff_cost_title']) . drupal_render($form[$key]['staff_cost_title_text']), 'class' => 'staff_cost-title'),
        array('data' => drupal_render($form[$key]['staff_cost_hours']) . drupal_render($form[$key]['staff_cost_hours_text']), 'class' => 'staff_cost-hours'),
        array('data' => drupal_render($form[$key]['staff_cost_rate']) . drupal_render($form[$key]['staff_cost_rate_text']), 'class' => 'staff_cost-rate'),
        array('data' => drupal_render($form[$key]['staff_cost_quantity']) . drupal_render($form[$key]['staff_cost_quantity_text']), 'class' => 'staff_cost-quantity'),
        array('data' => drupal_render($form[$key]['remove_staff_cost']), 'class' => 'remove-staff_cost'),
      ),
    );
    // Add additional attributes to the row, such as a class for this row.
    if (isset($form[$key]['#attributes'])) {
      $row = array_merge($row, $form[$key]['#attributes']);
    }
    $rows[] = $row;
  }
  $output = theme('table', $headers, $rows);
  $output . = drupal_render($form);
  return $output;
}
/**
 * @function
 * Outputs the training_cost table for display on the node form.
 */
function theme_jiscpmbca_training_cost_table($form) {
  $rows = array();
  $headers = array(
    t('Title'),
    t('Description'),
    t('Total Cost'),
    '',
  );
  foreach (element_children($form) as $key) {
    // No need to print the field title every time.
    unset(
      $form[$key]['training_cost_title_text']['#title'],
      $form[$key]['training_cost_description_text']['#title'],
      $form[$key]['training_cost_total_text']['#title'],
      $form[$key]['remove_training_cost']['#title']
    );
    // Build the table row.
    $row = array(
      'data' => array(
        array('data' => drupal_render($form[$key]['training_cost_title']) . drupal_render($form[$key]['training_cost_title_text']), 'class' => 'training_cost-title'),
        array('data' => drupal_render($form[$key]['training_cost_description']) . drupal_render($form[$key]['training_cost_description_text']), 'class' => 'training_cost-description'),
        array('data' => drupal_render($form[$key]['training_cost_total']) . drupal_render($form[$key]['training_cost_total_text']), 'class' => 'training_cost-total'),
        array('data' => drupal_render($form[$key]['remove_training_cost']), 'class' => 'remove-training_cost'),
      ),
    );
    // Add additional attributes to the row, such as a class for this row.
    if (isset($form[$key]['#attributes'])) {
      $row = array_merge($row, $form[$key]['#attributes']);
    }
    $rows[] = $row;
  }
  $output = theme('table', $headers, $rows);
  $output . = drupal_render($form);
  return $output;
}
/**
 * @function
 * Outputs the project equipment_cost table for display on the node form .
 */
function theme_jiscpmbca_equipment_cost_table($form) {
  $rows = array();
  $headers = array(
    t('Title'),
    t('Description'),
    t('Total Cost'),
    '',
  );

  foreach (element_children($form) as $key) {
    // No need to print the field title every time.
    unset(
      $form[$key]['equipment_cost_uid_text']['#title'],
      $form[$key]['equipment_cost_description']['#title'],
      $form[$key]['remove_equipment_cost']['#title']
    );
    // Build the table row.
    $row = array(
      'data' => array(
        array('data' => drupal_render($form[$key]['equipment_cost_uid']) . drupal_render($form[$key]['equipment_cost_uid_text']), 'class' => 'equipment_cost-title'),
        array('data' => drupal_render($form[$key]['equipment_cost_description']) . drupal_render($form[$key]['equipment_cost_description_text']), 'class' => 'equipment_cost-description'),
        array('data' => drupal_render($form[$key]['equipment_cost_total']) . drupal_render($form[$key]['equipment_cost_total_text']), 'class' => 'equipment_cost-total'),
        array('data' => drupal_render($form[$key]['remove_equipment_cost']), 'class' => 'remove-equipment_cost'),
      ),
    );
    // Add additional attributes to the row, such as a class for this row.
    if (isset($form[$key]['#attributes'])) {
      $row = array_merge($row, $form[$key]['#attributes']);
    }
    $rows[] = $row;
  }
  $output = theme('table', $headers, $rows);
  $output . = drupal_render($form);
  return $output;
}
/**
 * @function
 * Outputs the project other_cost table for display on the node form.
 */
function theme_jiscpmbca_other_cost_table($form) {
  $rows = array();
  $headers = array(
    t('Title'),
    t('Description'),
    t('Total Cost'),
    '',
  );
  foreach (element_children($form) as $key) {
    // No need to print the field title every time.
    unset(
      $form[$key]['other_cost_title_text']['#title'],
      $form[$key]['other_cost_description_text']['#title'],
      $form[$key]['other_cost_total_text']['#title'],
      $form[$key]['remove_other_cost']['#title']
    );
    // Build the table row.
    $row = array(
      'data' => array(
        array('data' => drupal_render($form[$key]['other_cost_title']) . drupal_render($form[$key]['other_cost_title_text']), 'class' => 'other_cost-title'),
        array('data' => drupal_render($form[$key]['other_cost_description']) . drupal_render($form[$key]['other_cost_description_text']), 'class' => 'other_cost-description'),
        array('data' => drupal_render($form[$key]['other_cost_total']) . drupal_render($form[$key]['other_cost_total_text']), 'class' => 'other_cost-total'),
        array('data' => drupal_render($form[$key]['remove_other_cost']), 'class' => 'remove-other_cost'),
      ),
    );
    // Add additional attributes to the row, such as a class for this row.
    if (isset($form[$key]['#attributes'])) {
      $row = array_merge($row, $form[$key]['#attributes']);
    }
    $rows[] = $row;
  }
  $output = theme('table', $headers, $rows);
  $output . = drupal_render($form);
  return $output;
}
/**
 * @function
 * Outputs the project running_cost_training table for display on the node form.
 */
function theme_jiscpmbca_running_cost_training_table($form) {
  $rows = array();
  $headers = array(
    t('Title'),
    t('Description'),
    t('Total Cost'),
    '',
  );
  foreach (element_children($form) as $key) {
    // No need to print the field title every time.
    unset(
      $form[$key]['running_cost_training_title_text']['#title'],
      $form[$key]['running_cost_training_description_text']['#title'],
      $form[$key]['running_cost_training_total_text']['#title'],
      $form[$key]['remove_running_cost_training']['#title']
    );
    // Build the table row.
    $row = array(
      'data' => array(
        array('data' => drupal_render($form[$key]['running_cost_training_title']) . drupal_render($form[$key]['running_cost_training_title_text']), 'class' => 'running_cost_training-title'),
        array('data' => drupal_render($form[$key]['running_cost_training_description']) . drupal_render($form[$key]['running_cost_training_description_text']), 'class' => 'running_cost_training-description'),
        array('data' => drupal_render($form[$key]['running_cost_training_total']) . drupal_render($form[$key]['running_cost_training_total_text']), 'class' => 'running_cost_training-total'),
        array('data' => drupal_render($form[$key]['remove_running_cost_training']), 'class' => 'remove-running_cost_training'),
      ),
    );
    // Add additional attributes to the row, such as a class for this row.
    if (isset($form[$key]['#attributes'])) {
      $row = array_merge($row, $form[$key]['#attributes']);
    }
    $rows[] = $row;
  }
  $output = theme('table', $headers, $rows);
  $output . = drupal_render($form);
  return $output;
}
/**
 * @function
 * Outputs the project running_cost_licensing
 * table for display on the node form.
 */
function theme_jiscpmbca_running_cost_licensing_table($form) {
  $rows = array();
  $headers = array(
    t('Title'),
    t('Description'),
    t('Total Cost'),
    '',
  );
  foreach (element_children($form) as $key) {
    // No need to print the field title every time.
    unset(
      $form[$key]['running_cost_licensing_title_text']['#title'],
      $form[$key]['running_cost_licensing_description_text']['#title'],
      $form[$key]['running_cost_licensing_total_text']['#title'],
      $form[$key]['remove_running_cost_licensing']['#title']
    );
    // Build the table row.
    $row = array(
      'data' => array(
        array('data' => drupal_render($form[$key]['running_cost_licensing_title']) . drupal_render($form[$key]['running_cost_licensing_title_text']), 'class' => 'running_cost_licensing-title'),
        array('data' => drupal_render($form[$key]['running_cost_licensing_description']) . drupal_render($form[$key]['running_cost_licensing_description_text']), 'class' => 'running_cost_licensing-description'),
        array('data' => drupal_render($form[$key]['running_cost_licensing_total']) . drupal_render($form[$key]['running_cost_licensing_total_text']), 'class' => 'running_cost_licensing-total'),
        array('data' => drupal_render($form[$key]['remove_running_cost_licensing']), 'class' => 'remove-running_cost_licensing'),
      ),
    );
    // Add additional attributes to the row, such as a class for this row.
    if (isset($form[$key]['#attributes'])) {
      $row = array_merge($row, $form[$key]['#attributes']);
    }
    $rows[] = $row;
  }
  $output = theme('table', $headers, $rows);
  $output . = drupal_render($form);
  return $output;
}
/**
 * @function
 * Outputs the project running_cost_maintenance table
 * for display on the node form.
 */
function theme_jiscpmbca_running_cost_maintenance_table($form) {
  $rows = array();
  $headers = array(
    t('Title'),
    t('Description'),
    t('Total Cost'),
    '',
  );
  foreach (element_children($form) as $key) {
    // No need to print the field title every time.
    unset(
    $form[$key]['running_cost_maintenance_title_text']['#title'],
    $form[$key]['running_cost_maintenance_description_text']['#title'],
    $form[$key]['running_cost_maintenance_total_text']['#title'],
    $form[$key]['remove_running_cost_maintenance']['#title']
    );
    // Build the table row.
    $row = array(
      'data' => array(
        array('data' => drupal_render($form[$key]['running_cost_maintenance_title']) . drupal_render($form[$key]['running_cost_maintenance_title_text']), 'class' => 'running_cost_maintenance-title'),
        array('data' => drupal_render($form[$key]['running_cost_maintenance_description']) . drupal_render($form[$key]['running_cost_maintenance_description_text']), 'class' => 'running_cost_maintenance-description'),
        array('data' => drupal_render($form[$key]['running_cost_maintenance_total']) . drupal_render($form[$key]['running_cost_maintenance_total_text']), 'class' => 'running_cost_maintenance-total'),
        array('data' => drupal_render($form[$key]['remove_running_cost_maintenance']), 'class' => 'remove-running_cost_maintenance'),
      ),
    );
    // Add additional attributes to the row, such as a class for this row.
    if (isset($form[$key]['#attributes'])) {
      $row = array_merge($row, $form[$key]['#attributes']);
    }
    $rows[] = $row;
  }
  $output = theme('table', $headers, $rows);
  $output . = drupal_render($form);
  return $output;
}
/**
 * @function
 * Outputs the project running_cost_other table for
 *  display on the node form.
 */
function theme_jiscpmbca_running_cost_other_table($form) {
  $rows = array();
  $headers = array(
    t('Title'),
    t('Description'),
    t('Total Cost'),
    '',
  );
  foreach (element_children($form) as $key) {
    // No need to print the field title every time.
    unset(
    $form[$key]['running_cost_other_title_text']['#title'],
    $form[$key]['running_cost_other_description_text']['#title'],
    $form[$key]['running_cost_other_total_text']['#title'],
    $form[$key]['remove_running_cost_other']['#title']
    );
    // Build the table row.
    $row = array(
      'data' => array(
        array('data' => drupal_render($form[$key]['running_cost_other_title']) . drupal_render($form[$key]['running_cost_other_title_text']), 'class' => 'running_cost_other-title'),
        array('data' => drupal_render($form[$key]['running_cost_other_description']) . drupal_render($form[$key]['running_cost_other_description_text']), 'class' => 'running_cost_other-description'),
        array('data' => drupal_render($form[$key]['running_cost_other_total']) . drupal_render($form[$key]['running_cost_other_total_text']), 'class' => 'running_cost_other-total'),
        array('data' => drupal_render($form[$key]['remove_running_cost_other']), 'class' => 'remove-running_cost_other'),
      ),
    );
    // Add additional attributes to the row, such as a class for this row.
    if (isset($form[$key]['#attributes'])) {
      $row = array_merge($row, $form[$key]['#attributes']);
    }
    $rows[] = $row;
  }
  $output = theme('table', $headers, $rows);
  $output . = drupal_render($form);
  return $output;
}
/**
 * @function
 * Helper function to define populated form
 * field elements for jiscpmbca action node form.
 */
function jiscpmbca_action_display_form($delta, $action_title, $action_description, $action_deliverydate) {
  $form = array(
    '#tree' => TRUE,
  );
  // Action title.
  $form['action_title'] = array(
    '#type' => 'hidden',
    '#value' => $action_title,
    '#parents' => array('actions', $delta, 'action_title'),
  );
  $form['action_title_text'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
    '#weight' => 1,
    '#parents' => array('actions', $delta, 'action_title'),
    '#value' => $action_title,
  );
  // Action_description.
  $form['action_description'] = array(
    '#type' => 'hidden',
    '#value' => $action_description,
    '#parents' => array('actions', $delta, 'action_description'),
  );
  $form['action_description_text'] = array(
    '#type' => 'item',
    '#weight' => 2,
    '#parents' => array('actions', $delta, 'action_description'),
    '#value' => $action_description,
  );
  // Action_title.
  $form['action_deliverydate'] = array(
    '#type' => 'hidden',
    '#value' => $action_deliverydate,
    '#parents' => array('actions', $delta, 'action_deliverydate'),
  );
  $form['action_deliverydate_text'] = array(
    '#type' => 'item',
    '#weight' => 2,
    '#parents' => array('actions', $delta, 'action_deliverydate'),
    '#value' => $action_deliverydate,
  );
  // Remove button.
  $form['remove_action'] = array(
    '#type' => 'submit',
    '#name' => 'remove_action_' . $delta,
    '#value' => t('Remove'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_remove_row_submit'),
    '#parents' => array('actions', $delta, 'remove_action'),
    '#ahah' => array(
      'path' => 'jiscpmbca_action/js/' . ($delta + 1),
      'wrapper' => 'jiscpmbca-actions',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return $form;
}
/**
 * @function
 * Helper function to define populated form field elements for
 * jiscpmbca staff_cost node form.
 */
function jiscpmbca_staff_cost_display_form($delta, $staff_cost_title, $staff_cost_hours, $staff_cost_rate, $staff_cost_quantity) {
  $form = array(
    '#tree' => TRUE,
  );
  // Staff_cost title.
  $form['staff_cost_title'] = array(
    '#type' => 'hidden',
    '#value' => $staff_cost_title,
    '#parents' => array('staff_costs', $delta, 'staff_cost_title'),
  );
  $form['staff_cost_title_text'] = array(
    '#type' => 'item',
    '#title' => t('Resource'),
    '#weight' => 1,
    '#parents' => array('staff_costs', $delta, 'staff_cost_title'),
    '#value' => $staff_cost_title,
  );
  // Staff_cost hours.
  $form['staff_cost_hours'] = array(
    '#type' => 'hidden',
    '#value' => $staff_cost_hours,
    '#parents' => array('staff_costs', $delta, 'staff_cost_hours'),
  );
  $form['staff_cost_hours_text'] = array(
    '#type' => 'item',
    '#title' => t('Hours'),
    '#weight' => 2,
    '#parents' => array('staff_costs', $delta, 'staff_cost_hours'),
    '#value' => $staff_cost_hours,
  );
  // Staff_cost rate.
  $form['staff_cost_rate'] = array(
    '#type' => 'hidden',
    '#value' => $staff_cost_rate,
    '#parents' => array('staff_costs', $delta, 'staff_cost_rate'),
  );
  $form['staff_cost_rate_text'] = array(
    '#type' => 'item',
    '#title' => t('Rate'),
    '#weight' => 2,
    '#parents' => array('staff_costs', $delta, 'staff_cost_rate'),
    '#value' => $staff_cost_rate,
  );
  // Staff_cost quantity.
  $form['staff_cost_quantity'] = array(
    '#type' => 'hidden',
    '#value' => $staff_cost_quantity,
    '#parents' => array('staff_costs', $delta, 'staff_cost_quantity'),
  );
  $form['staff_cost_quantity_text'] = array(
    '#type' => 'item',
    '#title' => t('Quantity'),
    '#weight' => 2,
    '#parents' => array('staff_costs', $delta, 'staff_cost_quantity'),
    '#value' => $staff_cost_quantity,
  );
  // Remove button.
  $form['remove_staff_cost'] = array(
    '#type' => 'submit',
    '#name' => 'remove_staff_cost_' . $delta,
    '#value' => t('Remove'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_remove_row_submit'),
    '#parents' => array('staff_costs', $delta, 'remove_staff_cost'),
    '#ahah' => array(
      'path' => 'jiscpmbca_staff_cost/js/' . ($delta + 1),
      'wrapper' => 'jiscpmbca-staff_costs',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return $form;
}
/**
 * @function
 * Helper function to define populated form field
 * elements for jiscpmbca training_cost node form.
 */
function jiscpmbca_training_cost_display_form($delta, $training_cost_title, $training_cost_description, $training_cost_total) {
  $form = array(
    '#tree' => TRUE,
  );
  // Training_cost title.
  $form['training_cost_title'] = array(
    '#type' => 'hidden',
    '#value' => $training_cost_title,
    '#parents' => array('training_costs', $delta, 'training_cost_title'),
  );
  $form['training_cost_title_text'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
    '#weight' => 1,
    '#parents' => array('training_costs', $delta, 'training_cost_title'),
    '#value' => $training_cost_title,
  );
  // Training_cost_description.
  $form['training_cost_description'] = array(
    '#type' => 'hidden',
    '#value' => $training_cost_description,
    '#parents' => array('training_costs', $delta, 'training_cost_description'),
  );
  $form['training_cost_description_text'] = array(
    '#type' => 'item',
    '#title' => t('Description'),
    '#weight' => 2,
    '#parents' => array('training_costs', $delta, 'training_cost_description'),
    '#value' => $training_cost_description,
  );
  // Training_cost_title.
  $form['training_cost_total'] = array(
    '#type' => 'hidden',
    '#value' => $training_cost_total,
    '#parents' => array('training_costs', $delta, 'training_cost_total'),
  );
  $form['training_cost_total_text'] = array(
    '#type' => 'item',
    '#title' => t('Total Cost'),
    '#weight' => 2,
    '#parents' => array('training_costs', $delta, 'training_cost_total'),
    '#value' => $training_cost_total,
  );
  // Remove button.
  $form['remove_training_cost'] = array(
    '#type' => 'submit',
    '#name' => 'remove_training_cost_' . $delta,
    '#value' => t('Remove'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_remove_row_submit'),
    '#parents' => array('training_costs', $delta, 'remove_training_cost'),
    '#ahah' => array(
      'path' => 'jiscpmbca_training_cost/js/' . ($delta + 1),
      'wrapper' => 'jiscpmbca-training_costs',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return $form;
}
/**
 * @function
 * Helper function to define populated form field
 * elements for jiscpmbca equipment_cost node form.
 */
function jiscpmbca_equipment_cost_display_form($delta, $equipment_cost_title, $equipment_cost_description, $equipment_cost_total) {
  $form = array(
    '#tree' => TRUE,
  );
  // Equipment_cost title.
  $form['equipment_cost_title'] = array(
    '#type' => 'hidden',
    '#value' => $equipment_cost_title,
    '#parents' => array('equipment_costs', $delta, 'equipment_cost_title'),
  );
  $form['equipment_cost_title_text'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
    '#weight' => 1,
    '#parents' => array('equipment_costs', $delta, 'equipment_cost_title'),
    '#value' => $equipment_cost_title,
  );
  // Equipment_cost_description.
  $form['equipment_cost_description'] = array(
    '#type' => 'hidden',
    '#value' => $equipment_cost_description,
    '#parents' => array('equipment_costs', $delta, 'equipment_cost_description'),
  );
  $form['equipment_cost_description_text'] = array(
    '#type' => 'item',
    '#title' => t('Description'),
    '#weight' => 2,
    '#parents' => array('equipment_costs', $delta, 'equipment_cost_description'),
    '#value' => $equipment_cost_description,
  );
  // Equipment_cost_title.
  $form['equipment_cost_total'] = array(
    '#type' => 'hidden',
    '#value' => $equipment_cost_total,
    '#parents' => array('equipment_costs', $delta, 'equipment_cost_total'),
  );
  $form['equipment_cost_total_text'] = array(
    '#type' => 'item',
    '#title' => t('Total Cost'),
    '#weight' => 2,
    '#parents' => array('equipment_costs', $delta, 'equipment_cost_total'),
    '#value' => $equipment_cost_total,
  );
  // Remove button.
  $form['remove_equipment_cost'] = array(
    '#type' => 'submit',
    '#name' => 'remove_equipment_cost_' . $delta,
    '#value' => t('Remove'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_remove_row_submit'),
    '#parents' => array('equipment_costs', $delta, 'remove_equipment_cost'),
    '#ahah' => array(
      'path' => 'jiscpmbca_equipment_cost/js/' . ($delta + 1),
      'wrapper' => 'jiscpmbca-equipment_costs',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return $form;
}
/**
 * @function
 * Helper function to define populated form field elements for
 * jiscpmbca other_cost node form.
 */
function jiscpmbca_other_cost_display_form($delta, $other_cost_title, $other_cost_description, $other_cost_total) {
  $form = array(
    '#tree' => TRUE,
  );
  // Other_cost title.
  $form['other_cost_title'] = array(
    '#type' => 'hidden',
    '#value' => $other_cost_title,
    '#parents' => array('other_costs', $delta, 'other_cost_title'),
  );
  $form['other_cost_title_text'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
    '#weight' => 1,
    '#parents' => array('other_costs', $delta, 'other_cost_title'),
    '#value' => $other_cost_title,
  );
  // Other_cost_description.
  $form['other_cost_description'] = array(
    '#type' => 'hidden',
    '#value' => $other_cost_description,
    '#parents' => array('other_costs', $delta, 'other_cost_description'),
  );
  $form['other_cost_description_text'] = array(
    '#type' => 'item',
    '#title' => t('Description'),
    '#weight' => 2,
    '#parents' => array('other_costs', $delta, 'other_cost_description'),
    '#value' => $other_cost_description,
  );
  // Other_cost_title.
  $form['other_cost_total'] = array(
    '#type' => 'hidden',
    '#value' => $other_cost_total,
    '#parents' => array('other_costs', $delta, 'other_cost_total'),
  );
  $form['other_cost_total_text'] = array(
    '#type' => 'item',
    '#title' => t('Total Cost'),
    '#weight' => 2,
    '#parents' => array('other_costs', $delta, 'other_cost_total'),
    '#value' => $other_cost_total,
  );
  // Remove button.
  $form['remove_other_cost'] = array(
    '#type' => 'submit',
    '#name' => 'remove_other_cost_' . $delta,
    '#value' => t('Remove'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_remove_row_submit'),
    '#parents' => array('other_costs', $delta, 'remove_other_cost'),
    '#ahah' => array(
      'path' => 'jiscpmbca_other_cost/js/' . ($delta + 1),
      'wrapper' => 'jiscpmbca-other_costs',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return $form;
}
/**
 * @function
 * Helper function to define populated form field elements
 * for jiscpmbca running_cost_training node form.
 */
function jiscpmbca_running_cost_training_display_form($delta, $running_cost_training_title, $running_cost_training_description, $running_cost_training_total) {
  $form = array(
    '#tree' => TRUE,
  );
  // Running_cost_training title.
  $form['running_cost_training_title'] = array(
    '#type' => 'hidden',
    '#value' => $running_cost_training_title,
    '#parents' => array('running_cost_trainings', $delta, 'running_cost_training_title'),
  );
  $form['running_cost_training_title_text'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
    '#weight' => 1,
    '#parents' => array('running_cost_trainings', $delta, 'running_cost_training_title'),
    '#value' => $running_cost_training_title,
  );
  // Running_cost_training_description.
  $form['running_cost_training_description'] = array(
    '#type' => 'hidden',
    '#value' => $running_cost_training_description,
    '#parents' => array('running_cost_trainings', $delta, 'running_cost_training_description'),
  );
  $form['running_cost_training_description_text'] = array(
    '#type' => 'item',
    '#title' => t('Description'),
    '#weight' => 2,
    '#parents' => array('running_cost_trainings', $delta, 'running_cost_training_description'),
    '#value' => $running_cost_training_description,
  );
  // Running_cost_training_title.
  $form['running_cost_training_total'] = array(
    '#type' => 'hidden',
    '#value' => $running_cost_training_total,
    '#parents' => array('running_cost_trainings', $delta, 'running_cost_training_total'),
  );
  $form['running_cost_training_total_text'] = array(
    '#type' => 'item',
    '#title' => t('Total Cost'),
    '#weight' => 2,
    '#parents' => array('running_cost_trainings', $delta, 'running_cost_training_total'),
    '#value' => $running_cost_training_total,
  );
  // Remove button.
  $form['remove_running_cost_training'] = array(
    '#type' => 'submit',
    '#name' => 'remove_running_cost_training_' . $delta,
    '#value' => t('Remove'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_remove_row_submit'),
    '#parents' => array('running_cost_trainings', $delta, 'remove_running_cost_training'),
    '#ahah' => array(
      'path' => 'jiscpmbca_running_cost_training/js/' . ($delta + 1),
      'wrapper' => 'jiscpmbca-running_cost_trainings',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return $form;
}
/**
 * @function
 * Helper function to define populated form field elements
 * for jiscpmbca running_cost_licensing node form.
 */
function jiscpmbca_running_cost_licensing_display_form($delta, $running_cost_licensing_title, $running_cost_licensing_description, $running_cost_licensing_total) {
  $form = array(
    '#tree' => TRUE,
  );
  // Running_cost_licensing title.
  $form['running_cost_licensing_title'] = array(
    '#type' => 'hidden',
    '#value' => $running_cost_licensing_title,
    '#parents' => array('running_cost_licensings', $delta, 'running_cost_licensing_title'),
  );
  $form['running_cost_licensing_title_text'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
    '#weight' => 1,
    '#parents' => array('running_cost_licensings', $delta, 'running_cost_licensing_title'),
    '#value' => $running_cost_licensing_title,
  );
  // Running_cost_licensing_description.
  $form['running_cost_licensing_description'] = array(
    '#type' => 'hidden',
    '#value' => $running_cost_licensing_description,
    '#parents' => array('running_cost_licensings', $delta, 'running_cost_licensing_description'),
  );
  $form['running_cost_licensing_description_text'] = array(
    '#type' => 'item',
    '#title' => t('Description'),
    '#weight' => 2,
    '#parents' => array('running_cost_licensings', $delta, 'running_cost_licensing_description'),
    '#value' => $running_cost_licensing_description,
  );
  // Running_cost_licensing_title.
  $form['running_cost_licensing_total'] = array(
    '#type' => 'hidden',
    '#value' => $running_cost_licensing_total,
    '#parents' => array('running_cost_licensings', $delta, 'running_cost_licensing_total'),
  );
  $form['running_cost_licensing_total_text'] = array(
    '#type' => 'item',
    '#title' => t('Total Cost'),
    '#weight' => 2,
    '#parents' => array('running_cost_licensings', $delta, 'running_cost_licensing_total'),
    '#value' => $running_cost_licensing_total,
  );
  // Remove button.
  $form['remove_running_cost_licensing'] = array(
    '#type' => 'submit',
    '#name' => 'remove_running_cost_licensing_' . $delta,
    '#value' => t('Remove'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_remove_row_submit'),
    '#parents' => array('running_cost_licensings', $delta, 'remove_running_cost_licensing'),
    '#ahah' => array(
      'path' => 'jiscpmbca_running_cost_licensing/js/' . ($delta + 1),
      'wrapper' => 'jiscpmbca-running_cost_licensings',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return $form;
}
/**
 * @function
 * Helper function to define populated form field
 * elements for jiscpmbca running_cost_maintenance node form.
 */
function jiscpmbca_running_cost_maintenance_display_form($delta, $running_cost_maintenance_title, $running_cost_maintenance_description, $running_cost_maintenance_total) {
  $form = array(
    '#tree' => TRUE,
  );
  // Running_cost_maintenance title.
  $form['running_cost_maintenance_title'] = array(
    '#type' => 'hidden',
    '#value' => $running_cost_maintenance_title,
    '#parents' => array('running_cost_maintenances', $delta, 'running_cost_maintenance_title'),
  );
  $form['running_cost_maintenance_title_text'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
    '#weight' => 1,
    '#parents' => array('running_cost_maintenances', $delta, 'running_cost_maintenance_title'),
    '#value' => $running_cost_maintenance_title,
  );
  // Running_cost_maintenance_description.
  $form['running_cost_maintenance_description'] = array(
    '#type' => 'hidden',
    '#value' => $running_cost_maintenance_description,
    '#parents' => array('running_cost_maintenances', $delta, 'running_cost_maintenance_description'),
  );
  $form['running_cost_maintenance_description_text'] = array(
    '#type' => 'item',
    '#title' => t('Description'),
    '#weight' => 2,
    '#parents' => array('running_cost_maintenances', $delta, 'running_cost_maintenance_description'),
    '#value' => $running_cost_maintenance_description,
  );
  // Running_cost_maintenance_title.
  $form['running_cost_maintenance_total'] = array(
    '#type' => 'hidden',
    '#value' => $running_cost_maintenance_total,
    '#parents' => array('running_cost_maintenances', $delta, 'running_cost_maintenance_total'),
  );
  $form['running_cost_maintenance_total_text'] = array(
    '#type' => 'item',
    '#title' => t('Total Cost'),
    '#weight' => 2,
    '#parents' => array('running_cost_maintenances', $delta, 'running_cost_maintenance_total'),
    '#value' => $running_cost_maintenance_total,
  );
  // Remove button.
  $form['remove_running_cost_maintenance'] = array(
    '#type' => 'submit',
    '#name' => 'remove_running_cost_maintenance_' . $delta,
    '#value' => t('Remove'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_remove_row_submit'),
    '#parents' => array('running_cost_maintenances', $delta, 'remove_running_cost_maintenance'),
    '#ahah' => array(
      'path' => 'jiscpmbca_running_cost_maintenance/js/' . ($delta + 1),
      'wrapper' => 'jiscpmbca-running_cost_maintenances',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return $form;
}
/**
 * @function
 * Helper function to define populated form field elements for
 * jiscpmbca running_cost_other node form.
 */
function jiscpmbca_running_cost_other_display_form($delta, $running_cost_other_title, $running_cost_other_description, $running_cost_other_total) {
  $form = array(
    '#tree' => TRUE,
  );
  // Running_cost_other title.
  $form['running_cost_other_title'] = array(
    '#type' => 'hidden',
    '#value' => $running_cost_other_title,
    '#parents' => array('running_cost_others', $delta, 'running_cost_other_title'),
  );
  $form['running_cost_other_title_text'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
    '#weight' => 1,
    '#parents' => array('running_cost_others', $delta, 'running_cost_other_title'),
    '#value' => $running_cost_other_title,
  );
  // Running_cost_other_description.
  $form['running_cost_other_description'] = array(
    '#type' => 'hidden',
    '#value' => $running_cost_other_description,
    '#parents' => array('running_cost_others', $delta, 'running_cost_other_description'),
  );
  $form['running_cost_other_description_text'] = array(
    '#type' => 'item',
    '#title' => t('Description'),
    '#weight' => 2,
    '#parents' => array('running_cost_others', $delta, 'running_cost_other_description'),
    '#value' => $running_cost_other_description,
  );
  // Running_cost_other_title.
  $form['running_cost_other_total'] = array(
    '#type' => 'hidden',
    '#value' => $running_cost_other_total,
    '#parents' => array('running_cost_others', $delta, 'running_cost_other_total'),
  );
  $form['running_cost_other_total_text'] = array(
    '#type' => 'item',
    '#title' => t('Total Cost'),
    '#weight' => 2,
    '#parents' => array('running_cost_others', $delta, 'running_cost_other_total'),
    '#value' => $running_cost_other_total,
  );
  // Remove button.
  $form['remove_running_cost_other'] = array(
    '#type' => 'submit',
    '#name' => 'remove_running_cost_other_' . $delta,
    '#value' => t('Remove'),
    '#weight' => 1,
    '#submit' => array('jiscpmbca_remove_row_submit'),
    '#parents' => array('running_cost_others', $delta, 'remove_running_cost_other'),
    '#ahah' => array(
      'path' => 'jiscpmbca_running_cost_other/js/' . ($delta + 1),
      'wrapper' => 'jiscpmbca-running_cost_others',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  return $form;
}
